[comment encoding = UTF-8 /]
[module MasterDetailFilterClass('http://www.eclipse.org/uml2/5.0.0/UML')]
[template public generateElementFilterClass(aModel : Model, aClass : Class, sString : String)]
[comment @main /]
[if aClass.getEAnnotation('crud-').toString().contains('crud-')]
[if sString.equalsIgnoreCase('controllerquery!=null')]
	list[aClass.name.toUpperFirst()/] = [aClass.name.toLower()/]Service.list[aClass.name.toUpperFirst()/]ssQuery([aClass.name.toLower()/], query, _page, 10);
	rows = [aClass.name.toLower()/]Service.getTotalRowsSearch(query);
[/if]
[if sString.equalsIgnoreCase('getTotalRows')]
[/if]
[/if]
[for (p : Package | aModel.packagedElement->filter(Package))]
			[if p.name.equalsIgnoreCase('com.softtek.acceleo.demo')]	
				[for (a : Association | p.packagedElement->filter(Association))]	
					[for (p : Property | a.memberEnd)]
					[if  p.name.toLower().equalsIgnoreCase(aClass.name) and (p.lower.toString().equalsIgnoreCase('1') and p.upperValue.stringValue().equalsIgnoreCase('1'))]
					[for (p: Property | a.memberEnd -> select (type <> aClass))]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('AutowiredDetail')]
@Autowired
private [p.name.toUpperFirst()/]Service [p.name.toLower()/]Service;
[/if]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('importDetail')]
import com.softtek.acceleo.demo.service.[p.name.toUpperFirst()/]Service;
[/if]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('getNumberRowDetail')]
rows = [p.name.toLower()/]Service.getTotalRows(id +"", ""); 
[/if]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('controllerquery!=null')]
list[aClass.name.toUpperFirst()/] = [aClass.name.toLower()/]Service.list[aClass.name.toUpperFirst()/]ssQuery([aClass.name.toLower()/], query, _page, 10);
rows = [aClass.name.toLower()/]Service.getTotalRowsSearch(query);	
[/if]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('getTotalRows')]
[/if]
[/for]
					[elseif p.name.toLower().equalsIgnoreCase(aClass.name) and (p.lower.toString().equalsIgnoreCase('0') and p.upperValue.stringValue().equalsIgnoreCase('*'))]	
						 [for (p: Property | a.memberEnd -> select (type <> aClass))]
                			 [if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('foreignField')]
String str[p.name.toUpperFirst()/]=requestParams.get("[p.name.toLower()/]_id");			
							 [/if]	
							 [if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('foreingFieldboolean')]
&& str[(p.name.toUpperFirst())/] == null[/if]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('parentField')]
, str[p.name.toUpperFirst()/]
[/if]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('parentExistDef')]
str[(p.name.toUpperFirst())/]
[/if]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('parentAloneNameDefinition')]
String str[p.name.toUpperFirst()/]
[/if]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('parentAloneNameDefinitionComma')]
, String str[p.name.toUpperFirst()/]
[/if]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('restrictionParent')]
.add(Restrictions.eq("[(p.name.toLowerCase())/]_id", str[p.name.toUpperFirst()/]) )
[/if]
				[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('foreingFieldElseIf')]
else if (str[p.name.toUpperFirst()/] != null) {
			list[aClass.name.toUpperFirst()/] = [aClass.name.toLower()/]Service.list[aClass.name.toUpperFirst()/]sFilterMaster([aClass.name.toLower()/], str[p.name.toUpperFirst()/], _page, 10);
			rows = [aClass.name.toLowerCase()/]Service.getTotalRows(str[(p.name.toUpperFirst())/]);
		}[/if]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('addServiceDetail')]
public List<[aClass.name.toUpperFirst()/]> list[aClass.name.toUpperFirst()/]sFilterMaster([aClass.name.toUpperFirst()/] [aClass.name.toLower()/], String [p.name.toLower()/], int page, int size);

[/if]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('addServiceImplDetail')]
public List<[aClass.name.toUpperFirst()/]> list[aClass.name.toUpperFirst()/]sFilterMaster([aClass.name.toUpperFirst()/] [aClass.name.toLower()/], String [p.name.toLower()/], int page, int size) {
		// TODO Auto-generated method stub
		return [aClass.name.toLower()/]Repository.list[aClass.name.toUpperFirst()/]sFilterMaster([aClass.name.toLower()/], [p.name.toLower()/], page, size);
}
[/if]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('addRepository')]
public List<[aClass.name.toUpperFirst()/]> list[aClass.name.toUpperFirst()/]sFilterMaster([aClass.name.toUpperFirst()/] [aClass.name.toLower()/], String [p.name.toLower()/], int page, int size);
[/if]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('RepositoryQueryBy')]
public List<[aClass.name.toUpperFirst()/]> list[aClass.name.toUpperFirst()/]ssQueryBy[p.name.toUpperFirst()/]([aClass.name.toUpperFirst()/] [aClass.name.toLower()/], String query, String [p.name.toLower()/], int page, int size);
[/if]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('RepositoryQueryByImpl')]
@SuppressWarnings("unchecked")
	public List<[aClass.name.toUpperFirst()/]> list[aClass.name.toUpperFirst()/]ssQueryBy[p.name.toUpperFirst()/]([aClass.name.toUpperFirst()/] [aClass.name.toLower()/], String query, String [p.name.toLower()/], int page, int size) {
			//[aClass.name.toLower()/]Proxy.set#columnsGrid([aClass.name.toLower()/].get#columnsGrid());
			return (List<[aClass.name.toUpperFirst()/]>) sessionFactory.getCurrentSession()
					.createCriteria([aClass.name.toUpperFirst()/].class).setFirstResult((page - 1) * size)
					.add(Restrictions.eq("[p.name.toLowerCase()/]_id", [p.name.toLowerCase()/]) )
					[if aClass.getAllAttributes()-> asSequence() -> size() > 0 ]
					.add([for (p: Property | aClass.getAllAttributes())][if aClass.getAllAttributes()-> asSequence() -> size() = 1 ]Restrictions.like("[aClass.getAllAttributes().name/]", "%" + query +"%")[/if]	
						[if i = 1  and  aClass.getAllAttributes()-> asSequence() -> size() > 1 ]
							[for (p: Property | aClass.getAllAttributes())][if i > 1]Restrictions.or([/if][/for]	
						[for (p: Property | aClass.getAllAttributes())]Restrictions.like("[p.name.toLower()/]", "%" + query +"%")[if i > 1])[/if][if i < aClass.getAllAttributes()-> asSequence() -> size()],[/if][/for]	
						[/if] 		
					[/for]).list();
					[/if]
	}
[/if]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('addRepositoryImplMasterDetail')]
@SuppressWarnings("unchecked")
	public List<[aClass.name.toUpperFirst()/]> list[aClass.name.toUpperFirst()/]sFilterMaster([aClass.name.toUpperFirst()/] [aClass.name.toLower()/], String [p.name.toLower()/], int page, int size) {
			//facturaProxy.set#columnsGrid(factura.get#columnsGrid());
			return (List<[aClass.name.toUpperFirst()/]>) sessionFactory.getCurrentSession()
					.createCriteria([aClass.name.toUpperFirst()/].class).setFirstResult((page - 1) * size)
					.add(Restrictions.eq("[p.name.toLower()/]_id", [p.name.toLower()/]) ).list();
	}
[/if]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('controllerquery!=null')]
if (str[p.name.toUpperFirst()/] != null) {
			list[aClass.name.toUpperFirst()/] = [aClass.name.toLowerCase()/]Service.list[aClass.name.toUpperFirst()/]ssQueryBy[p.name.toUpperFirst()/]([aClass.name.toLowerCase()/], query, str[p.name.toUpperFirst()/], _page, 10);
			rows = [aClass.name.toLowerCase()/]Service.getTotalRows(str[p.name.toUpperFirst()/], query);
			} else {
			list[aClass.name.toUpperFirst()/] = [aClass.name.toLowerCase()/]Service.list[aClass.name.toUpperFirst()/]ssQuery([aClass.name.toLowerCase()/], query, _page, 10);
			rows = [aClass.name.toLowerCase()/]Service.getTotalRowsSearch(query);
}
[/if]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('getTotalRows')] 

public long getTotalRows(String str[p.name.toUpperFirst()/], String query);
[/if]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('getTotalRowsRepo')] 
public long getTotalRows(String str[p.name.toUpperFirst()/], String query);
[/if]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('getTotalRowsCriteria')] 
.add(Restrictions.eq("[p.name.toLowerCase()/]_id", query) )
[/if]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('getTotalRowsRepoImpl')] 
	@SuppressWarnings({ "unchecked" })
	public long getTotalRows(String str[p.name.toUpperFirst()/], String query) {
		
		long totalRows = 0;
		totalRows = (Long) sessionFactory.getCurrentSession()
		.createCriteria([aClass.name.toUpperFirst()/].class).setProjection(Projections.rowCount())
		.add(Restrictions.eq("[p.name.toLowerCase()/]_id", str[p.name.toUpperFirst()/]) )
		[if aClass.getAllAttributes()-> asSequence() -> size() > 0 ]
					.add([for (p: Property | aClass.getAllAttributes())][if aClass.getAllAttributes()-> asSequence() -> size() = 1 ]Restrictions.like("[aClass.getAllAttributes().name/]", "%" + query +"%")[/if]	
						[if i = 1  and  aClass.getAllAttributes()-> asSequence() -> size() > 1 ]
							[for (p: Property | aClass.getAllAttributes())][if i > 1]Restrictions.or([/if][/for]	
						[for (p: Property | aClass.getAllAttributes())]Restrictions.like("[p.name.toLower()/]", "%" + query +"%")[if i > 1])[/if][if i < aClass.getAllAttributes()-> asSequence() -> size()],[/if][/for]	
						[/if]
					[/for]).uniqueResult();
		[/if]	
		
		return totalRows;  

	}
[/if]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('getTotalRowsImpl')] 
@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
	public long getTotalRows(String str[p.name.toUpperFirst()/], String query) {
		return [aClass.name.toLowerCase()/]Repository.getTotalRows(str[p.name.toUpperFirst()/], query);
	}
[/if]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('listOrdenssQueryByCliente')]
public List<[aClass.name.toUpperFirst()/]> list[aClass.name.toUpperFirst()/]ssQueryBy[p.name.toUpperFirst()/]([aClass.name.toUpperFirst()/] [aClass.name.toLower()/], String query, String [p.name.toLower()/], int _page, int size);
[/if]
[if not p.name.toLower().equalsIgnoreCase(aClass.name) and sString.equalsIgnoreCase('listOrdenssQueryByClienteImpl')]
public List<[aClass.name.toUpperFirst()/]> list[aClass.name.toUpperFirst()/]ssQueryBy[p.name.toUpperFirst()/]([aClass.name.toUpperFirst()/] [aClass.name.toLower()/], String query, String [p.name.toLower()/], int _page, int size) {
		// TODO Auto-generated method stub
		return [aClass.name.toLower()/]Repository.list[aClass.name.toUpperFirst()/]ssQueryBy[p.name.toUpperFirst()/]([aClass.name.toLower()/], query, [p.name.toLower()/], _page, size);
}
[/if]
            			[/for]			
					[/if]
				[/for]
		[/for]
	[/if]
[/for]
[/template]
