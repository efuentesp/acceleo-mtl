[comment encoding = UTF-8 /]
[module CrudServiceComponentView('http://www.eclipse.org/uml2/5.0.0/UML')]

[template public generateElementCrudServiceComponentView(aModel : Model)]
[comment @main /]

[for (p : Package | aModel.packagedElement->filter(Package))]
	[if p.name.equalsIgnoreCase('com.softtek.acceleo.demo')]	
	 	[for (aClass : Class | p.packagedElement->filter(Class))]
			[ if (aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='Crud') 
               or aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='EnumRadio')
			   or aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='EnumCheck')
			   or aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='EnumSelect')) ]

[file ('app/admin/'.concat(aClass.name.replaceAll('radio', '').toLower()).concat('/').concat(aClass.name.replaceAll('radio', '').toLower()).concat('.component.service.ts'), false, 'UTF-8')]
import { Injectable }                              from '@angular/core';
import { environment }                             from "../../../environments/environment";
import { Http, Response }                          from "@angular/http";
import { Headers, RequestOptions }                 from '@angular/http';
import { Observable} from 'rxjs';
import { map } from 'rxjs/operators';

import { [name.replaceAll('radio', '').toUpperFirst()/] }                           from '../[name.replaceAll('radio', '').toLowerFirst()/]/[name.replaceAll('radio', '').toLowerFirst()/].component.model';
import { User } from '../user/user.component.model';
import { UserStorageComponent } from '../user/user-storage.component';

@Injectable()
export class [name.replaceAll('radio', '').toUpperFirst()/]Service {

    private is[name.replaceAll('radio', '').toUpperFirst()/]FormValid: boolean = false;
    private env: any = environment;
    private [name.replaceAll('radio', '').toLowerFirst()/] = new [name.replaceAll('radio', '').toUpperFirst()/]();
    private flag :boolean = false;
    private flagDelete :boolean = false;
    private storage: UserStorageComponent;

    public user: User = JSON.parse(localStorage.getItem('currentUser'));

    constructor(private http: Http) {
    }

    getAll[name.replaceAll('radio', '').toUpperFirst()/](){
		let headers = new Headers;
         headers.append('Content-Type','application/json');
         headers.append('Authorization','Bearer ' + this.user.token+'');
         let opts = new RequestOptions({ headers: headers });
      return this.http.get(this.env.api + "/[name.replaceAll('radio', '').toLower()/]", opts).pipe(map(res => res.json()));
    }

    save[name.replaceAll('radio', '').toUpperFirst()/]([name.replaceAll('radio', '').toLower()/]){
        let headers = new Headers;
        headers.append('Content-Type','application/json');
        headers.append('Authorization','Bearer ' + this.user.token+'');
        let opts = new RequestOptions({ headers: headers });

		if (![name.replaceAll('radio', '').toLower()/].[name.replaceAll('radio', '').toLower()/]Id){
            return this.http.post(this.env.api + "/[name.replaceAll('radio', '').toLower()/]", [name.replaceAll('radio', '').toLower()/], opts).pipe(map(res => res));
        }else{
            return this.http.put(this.env.api + "/[name.replaceAll('radio', '').toLower()/]/"+ [name.replaceAll('radio', '').toLower()/].[name.replaceAll('radio', '').toLower()/]Id, [name.replaceAll('radio', '').toLower()/], opts).pipe(map(res => res));
        }
    }

    delete[name.replaceAll('radio', '').toUpperFirst()/]([name.replaceAll('radio', '').toLower()/]){
        let headers = new Headers;
        headers.append('Content-Type','application/json');
        headers.append('Authorization','Bearer ' + this.user.token+'');
        let opts = new RequestOptions({ headers: headers });
        return this.http.delete(this.env.api + "/[name.replaceAll('radio', '').toLower()/]/"+[name.replaceAll('radio', '').toLower()/].[name.replaceAll('radio', '').toLower()/]Id, opts).pipe(map(res => res));
    }

    get[name.replaceAll('radio', '').toUpperFirst()/]ById([name.replaceAll('radio', '').toLower()/]Id){

        let headers = new Headers;
        headers.append('Content-Type','application/json');
        headers.append('Authorization','Bearer ' + this.user.token+'');
        let opts = new RequestOptions({ headers: headers });
        return this.http.get(this.env.api + "/id[name.replaceAll('radio', '').toLower()/]/"+[name.replaceAll('radio', '').toLower()/]Id, opts).pipe(map(res => res.json()));
    }

    reset[name.replaceAll('radio', '').toUpperFirst()/](): [name.replaceAll('radio', '').toUpperFirst()/] {
        this.clear();
        return this.[name.replaceAll('radio', '').toLower()/];
    }

    get[name.replaceAll('radio', '').toUpperFirst()/](): [name.replaceAll('radio', '').toUpperFirst()/] {
        var [name.replaceAll('radio', '').toLower()/]: [name.replaceAll('radio', '').toUpperFirst()/] = {
[for (anAttribute: Property | getAllAttributes())]
	[for (anElement: Property | anAttribute.type.allOwnedElements()->filter(Property) )]
		[if (anElement.name.equalsIgnoreCase('typeJava'))] 
			[if not anAttribute.name.equalsIgnoreCase('id')]
					[anAttribute.name.replaceAll('radio', '').toLower()/]: this.[aClass.name.replaceAll('radio', '').toLower()/].[anAttribute.name.replaceAll('radio', '').toLower()/], 
			[/if]    
		[/if]
	[/for]
[/for]
					
[for (attribute)]
	[comment Enum/]
	[if not (type.name = ('HText') or type.name.startsWith('modal')
		or type.name = ('HCheckbox') 
		or type.name = ('HInteger') 
		or type.name = ('HDate')
		or type.name = ('HTextLong') 
		or type.name = ('HRadio')
		or type.name = ('HBoolean')
		or type.name = ('HDouble')
		or type.name = ('HEmail')
		or type.name = ('HCurrency')
		or type.name = ('HImage')
		or type.name = ('HFile')
)]
					[type.name.replaceAll('radio', '').toLowerFirst()/]Id: this.[aClass.name.replaceAll('radio', '').toLower()/].[name.replaceAll('radio', '').toLowerFirst()/]Id,
	[/if]
	[comment Foering Key/]
	[if (type.name.startsWith('modal'))]
					[name.replaceAll('radio', '').toLowerFirst()/]Id: this.[aClass.name.replaceAll('radio', '').toLower()/].[name.replaceAll('radio', '').toLowerFirst()/]Id,
					[name.replaceAll('radio', '').toLowerFirst()/]Item: this.[aClass.name.replaceAll('radio', '').toLower()/].[name.replaceAll('radio', '').toLowerFirst()/]Item,
	[/if]
[/for]
					[name.replaceAll('radio', '').toLowerFirst()/]Id: this.[name.replaceAll('radio', '').toLowerFirst()/].[name.replaceAll('radio', '').toLowerFirst()/]Id	

        };
        return [name.replaceAll('radio', '').toLowerFirst()/];
    }


set[name.replaceAll('radio', '').toUpperFirst()/]([name.replaceAll('radio', '').toLower()/]: [name.replaceAll('radio', '').toUpperFirst()/]) {
       
	this.is[name.replaceAll('radio', '').toUpperFirst()/]FormValid = true;
[for (anAttribute: Property | getAllAttributes())]
	[for (anElement: Property | anAttribute.type.allOwnedElements()->filter(Property) )]
		[if (anElement.name.equalsIgnoreCase('typeJava'))] 
			[if not anAttribute.name.equalsIgnoreCase('id')]
			this.[aClass.name.replaceAll('radio', '').toLower()/].[anAttribute.name.replaceAll('radio', '').toLower()/] = [aClass.name.replaceAll('radio', '').toLower()/].[anAttribute.name.replaceAll('radio', '').toLower()/];    
			[/if]
		[/if]
	[/for]
[/for]
[for (attribute)]
	[comment Enum/]
	[if not (type.name = ('HText') or type.name.startsWith('modal')
		or type.name = ('HCheckbox') 
		or type.name = ('HInteger') 
		or type.name = ('HDate')
		or type.name = ('HTextLong') 
		or type.name = ('HRadio')
		or type.name = ('HBoolean')
		or type.name = ('HDouble')
		or type.name = ('HEmail')
		or type.name = ('HCurrency')
		or type.name = ('HImage')
		or type.name = ('HFile')
)]
			this.[aClass.name.replaceAll('radio', '').toLower()/].[type.name.replaceAll('radio', '').toLowerFirst()/]Id = [aClass.name.replaceAll('radio', '').toLower()/].[type.name.replaceAll('radio', '').toLowerFirst()/]Id;
	[/if]
	[comment Foering Key/]
	[if (type.name.startsWith('modal'))]
			this.[aClass.name.replaceAll('radio', '').toLower()/].[name.replaceAll('radio', '').toLowerFirst()/]Id = [aClass.name.replaceAll('radio', '').toLower()/].[name.replaceAll('radio', '').toLowerFirst()/]Id;
			this.[aClass.name.replaceAll('radio', '').toLower()/].[name.replaceAll('radio', '').toLowerFirst()/]Item = [aClass.name.replaceAll('radio', '').toLower()/].[name.replaceAll('radio', '').toLowerFirst()/]Item;
	[/if]
[/for]
			this.[name.replaceAll('radio', '').toLower()/].[name.replaceAll('radio', '').toLowerFirst()/]Id        = [name.replaceAll('radio', '').toLower()/].[name.replaceAll('radio', '').toLowerFirst()/]Id;
        	this.validate[name.replaceAll('radio', '').toUpperFirst()/]();
    }

    isFormValid() {
        return this.is[name.replaceAll('radio', '').toUpperFirst()/]FormValid;
    }

    validate[name.replaceAll('radio', '').toUpperFirst()/]() {

    }

    clear() {

[for (anAttribute: Property | getAllAttributes())]
	[for (anElement: Property | anAttribute.type.allOwnedElements()->filter(Property) )]
		[if (anElement.name.equalsIgnoreCase('typeJava') and anElement.default.equalsIgnoreCase('string'))] 
			[if not (anAttribute.name.equalsIgnoreCase('id'))]
			this.[aClass.name.replaceAll('radio', '').toLower()/].[anAttribute.name.replaceAll('radio', '').toLower()/] = '';    
			[/if]
		[/if]
		[if (anElement.name.equalsIgnoreCase('typeJava') and anElement.default.equalsIgnoreCase('Integer'))] 
			[if not (anAttribute.name.equalsIgnoreCase('id'))]
			this.[aClass.name.replaceAll('radio', '').toLower()/].[anAttribute.name.replaceAll('radio', '').toLower()/] = null;    
			[/if]
		[/if]
		[if (anElement.name.equalsIgnoreCase('typeJava') and anElement.default.equalsIgnoreCase('Double'))] 
			[if not (anAttribute.name.equalsIgnoreCase('id'))]
			this.[aClass.name.replaceAll('radio', '').toLower()/].[anAttribute.name.replaceAll('radio', '').toLower()/] = '';    
			[/if]
		[/if]		
	[/for]
[/for]
[for (attribute)]
	[if not (type.name = ('HText') or type.name.startsWith('modal')
		or type.name = ('HCheckbox') 
		or type.name = ('HInteger') 
		or type.name = ('HDate')
		or type.name = ('HTextLong') 
		or type.name = ('HRadio')
		or type.name = ('HBoolean')
		or type.name = ('HDouble')
		or type.name = ('HEmail')
		or type.name = ('HCurrency')
		or type.name = ('HImage')
		or type.name = ('HFile')
)]
			this.[aClass.name.replaceAll('radio', '').toLower()/].[type.name.replaceAll('radio', '').toLowerFirst()/]Id = null;
	[/if]
	[if (type.name.startsWith('modal'))]
			this.[aClass.name.replaceAll('radio', '').toLower()/].[name.replaceAll('radio', '').toLowerFirst()/]Id = null;
			this.[aClass.name.replaceAll('radio', '').toLower()/].[name.replaceAll('radio', '').toLowerFirst()/]Item = null;
	[/if]
[/for]
			this.[name.replaceAll('radio', '').toLower()/].[aClass.name.replaceAll('radio', '').toLowerFirst()/]Id = null;
    }

    setEdit(flag){
        this.flag = flag;
    }

    getEdit(){
        return this.flag;
    }

    setDelete(flagDelete){
      this.flagDelete = flagDelete;
    }

    getDelete(){
      return this.flagDelete;
    }

}
[/file]

			[/if]
		[/for]
	[/if]
[/for]

[/template]
