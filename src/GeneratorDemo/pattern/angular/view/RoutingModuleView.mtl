[comment encoding = UTF-8 /]
[module RoutingModuleView('http://www.eclipse.org/uml2/5.0.0/UML')]


[template public generateRoutingModuleView(aModel : Model)]
[comment @main /]

[for (p : Package | aModel.packagedElement->filter(Package))]
	[if p.name.equalsIgnoreCase('com.softtek.acceleo.demo')]	
[file (('app/admin').concat('/admin-routing.module.ts'), false, 'UTF-8')]

import { NgModule }             from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

import { AdminComponent }           from './admin.component';
import { AdminDashboardComponent }  from './admin-dashboard.component';

import { AuthGuard }                from '../auth-guard.service';
import { ManagePrivilegeComponent } from './manage/manage-privilege.component';

import { UserManageComponent } from './user/manageUser/user-managecomponent';
import { UserEditComponent } from './user/editUser/user-edit.component';
import { UserCreateComponent } from './user/createUser/user-create.component';

import { AuthorityManageComponent } from './authority/manageAuthority/manage-authority.component';
import { AuthorityCreateComponent } from './authority/createAuthority/authority-create.component';
import { AuthorityEditComponent } from './authority/editAuthority/authority-edit.component';

	 	[for (aClass : Class | p.packagedElement->filter(Class))]
			[ if (aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='Crud')) ]
// [name.toUpperFirst()/]
import { [name.toUpperFirst()/]ManageComponent}       from './[name.toLower()/]/manage[name.toLower()/]/[name.toLower()/]-manage.component';
import { [name.toUpperFirst()/]CreateComponent}       from './[name.toLower()/]/create[name.toLower()/]/[name.toLower()/]-create.component';
import { [name.toUpperFirst()/]EditComponent}         from './[name.toLower()/]/edit[name.toLower()/]/[name.toLower()/]-edit.component';

			[/if]
		[/for]	

const adminRoutes: Routes = [ '[' /]
  {
    path: '',
    component: AdminComponent,
    canActivate: [ '[' /]AuthGuard[ ']' /],
    children: [ '[' /]
      {
        path: '',
        canActivateChild: [ '[' /]AuthGuard[ ']' /],
        children: [ '[' /]
        
		// [name.toUpperFirst()/]
		[for (aClass : Class | p.packagedElement->filter(Class))]
			[ if (aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='Crud')) ]
		{ path: 'create[name.toLower()/]',  component: [name.toUpperFirst()/]CreateComponent},  
		{ path: 'manage[name.toLower()/]',  component: [name.toUpperFirst()/]ManageComponent},  
		{ path: 'edit[name.toLower()/]',  component: [name.toUpperFirst()/]EditComponent},  
			
			[/if]
		[/for]

		  // Manage
          { path: 'manage', component: ManagePrivilegeComponent },
          
          // User
          { path: 'editUser', component: UserEditComponent},
          { path: 'createUser', component: UserCreateComponent},
          { path: 'manageUser', component: UserManageComponent },
          
          // Authority
          { path: 'createAuthority', component: AuthorityCreateComponent },
          { path: 'manageAuthority', component: AuthorityManageComponent },
          { path: 'editAuthority',   component: AuthorityEditComponent },
          { path: '', component: AdminDashboardComponent }
        ]
      }
    ]
  }
];

@NgModule({
  imports: [ '[' /]
    RouterModule.forChild(adminRoutes)
  [ ']' /],
  exports: [ '[' /]
    RouterModule
  [ ']' /]
})
export class AdminRoutingModule {}

[/file]

[file (('app/admin').concat('/admin.component.ts'), false, 'UTF-8')]
import { Component } from '@angular/core';
import { User } from './user/user.component.model';
import { AuthenticationService } from '../authentication.component.service';
import { Router, NavigationExtras } from '@angular/router';
import { Authority } from '../user/authorities.component.model';

@Component({
  templateUrl: 'admin.components.html'
})
export class AdminComponent {

  public userAdmin: User;
  public valueName: string;
  public token: string;
  public authorityList: Authority [ '[' /][ ']' /];
  public username: string;

// Menu activation
	 	[for (aClass : Class | p.packagedElement->filter(Class))]
			[ if (aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='Crud')) ]
// [name.toUpperFirst()/]
  private [name.toLower()/]_mgmnt: boolean = false;
  private [name.toLower()/]: boolean = false;
			[/if]
		[/for]	


  // Admin
  private manage: boolean = false;
  // Authority
  private authority: boolean = false;
  private authority_mgmnt: boolean = false;
  // User
  private user: boolean = false;
  private user_mgmnt: boolean = false;


  constructor(public authService: AuthenticationService, public router: Router) {
  }

  ngOnInit() {

    
    // Get token from user object
    this.userAdmin = JSON.parse(localStorage.getItem('currentUser'));
    

    this.authService.getMenu(this.userAdmin.token).subscribe(result => {
    // Fill the user object
    this.userAdmin = JSON.parse(localStorage.getItem('currentUser'));
    this.valueName = this.userAdmin.firstname + " " + this.userAdmin.lastname ;
    this.enabledLinks(this.userAdmin);

    this.buildMenu(this.userAdmin.authorities);

    });
  }

  enabledLinks(user){
  }

  buildMenu(authorities){
    authorities.forEach(element => {

	 	[for (aClass : Class | p.packagedElement->filter(Class))]
			[ if (aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='Crud')) ]
      if (element.authority == 'ROLE_[name.toUpper()/]SEARCH'){
        this.[name.toLower()/]_mgmnt = true;
      }
      if (element.authority == 'ROLE_[name.toUpper()/]CREATE'){
        this.[name.toLower()/] = true;
      }

			[/if]
		[/for]
 
      // Manage  --> (6)
      if (element.authority == 'ROLE_MANAGESEARCH'){
      this.manage = true;
      }

      // authority  --> (6)
      if (element.authority == 'ROLE_AUTHORITYSEARCH'){
        this.authority_mgmnt = true;
      }
      if (element.authority == 'ROLE_AUTHORITYCREATE'){
        this.authority = true;
      }

      // user  --> (5)
      if (element.authority == 'ROLE_USERSEARCH'){
        this.user_mgmnt = true;
      }
      if (element.authority == 'ROLE_USERCREATE'){
        this.user = true;
      }

    });

  }

  logout(): void {
    // clear token remove user from local storage to log user out
    this.token = null;
    localStorage.removeItem('currentUser');
    this.router.navigate( [ '[' /]'login' [ ']' /]); 
}


}
[/file]

[file (('app/admin').concat('/admin.module.ts'), false, 'UTF-8')]
import { NgModule }       from '@angular/core';
import { CommonModule }   from '@angular/common';
import { HttpModule, Http }   from '@angular/http'; 
import { ReactiveFormsModule, FormsModule }    from '@angular/forms';
import { NgxPaginationModule}  from 'ngx-pagination';

import { AdminComponent }           from './admin.component';
import { AdminDashboardComponent }  from './admin-dashboard.component';

import { AdminRoutingModule }       from './admin-routing.module';
import { HttpClientModule} from '@angular/common/http';
import { ManagePrivilegeComponent } from './manage/manage-privilege.component';
import { ManagePrivilegeService } from './manage/manage-privilege.component.service';
import { UserService } from './user/user.component.service';
import { SearchUserPipe } from './pipe/user.filter.pipe';
import { AuthorityService } from './authority/authority.component.service';
import { SearchAuthorityPipe } from './pipe/authority.filter.pipe';
import { UserManageComponent } from './user/manageUser/user-managecomponent';
import { UserEditComponent } from './user/editUser/user-edit.component';
import { UserCreateComponent } from './user/createUser/user-create.component';
import { AuthorityCreateComponent } from './authority/createAuthority/authority-create.component';
import { AuthorityManageComponent } from './authority/manageAuthority/manage-authority.component';
import { AuthorityEditComponent } from './authority/editAuthority/authority-edit.component';

[for (aClass : Class | p.packagedElement->filter(Class))]
	[ if (aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='Crud')) ]
  
import { [name.toUpperFirst()/]ManageComponent } from './[name.toLower()/]/manage[name.toLower()/]/[name.toLower()/]-manage.component';
import { [name.toUpperFirst()/]CreateComponent } from './[name.toLower()/]/create[name.toLower()/]/[name.toLower()/]-create.component';
import { [name.toUpperFirst()/]EditComponent } from './[name.toLower()/]/edit[name.toLower()/]/[name.toLower()/]-edit.component';
import { Search[name.toUpperFirst()/]Pipe } from './pipe/[name.toLower()/].filter.pipe';
import { [name.toUpperFirst()/]Service } from './[name.toLower()/]/[name.toLower()/].component.service';

	[/if]
[/for]

@NgModule({
  imports: [ '[' /]
    CommonModule,
    AdminRoutingModule,
    HttpModule,
    CommonModule,
	ReactiveFormsModule,
	FormsModule,
    NgxPaginationModule,
    HttpClientModule
  [ ']' /],
  declarations: [ '[' /]
[for (aClass : Class | p.packagedElement->filter(Class))]
	[ if (aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='Crud')) ]
    [name.toUpperFirst()/]CreateComponent,
    [name.toUpperFirst()/]ManageComponent,
    [name.toUpperFirst()/]EditComponent,  
	Search[name.toUpperFirst()/]Pipe,
	[/if]
[/for]
    AdminComponent,
    AdminDashboardComponent,
    ManagePrivilegeComponent,
    UserManageComponent,
    AuthorityCreateComponent, 
    AuthorityManageComponent,
    AuthorityEditComponent,
    SearchAuthorityPipe,
    SearchUserPipe,
    UserEditComponent,
    UserCreateComponent
  [ ']' /],
  providers: [ '[' /] 
[for (aClass : Class | p.packagedElement->filter(Class))]
	[ if (aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='Crud')) ]
    [name.toUpperFirst()/]Service,
	[/if]
[/for]
    ManagePrivilegeService,
    UserService,
    AuthorityService
[ ']' /]
})
export class AdminModule {}

[/file]
	[/if]
[/for]



[/template]
