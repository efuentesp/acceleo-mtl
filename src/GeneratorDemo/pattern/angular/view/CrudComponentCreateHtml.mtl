[comment encoding = UTF-8 /]
[module CrudComponentCreateHtml('http://www.eclipse.org/uml2/5.0.0/UML')]


[template public generateElementCrudComponentCreateHtml(aModel : Model)]
[comment @main /]

[for (p : Package | aModel.packagedElement->filter(Package))]
	[if p.name.equalsIgnoreCase('com.softtek.acceleo.demo')]	
	 	[for (aClass : Class | p.packagedElement->filter(Class))]
			[ if (aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='Crud')) ]

[file ('app/admin/'.concat(aClass.name.toLower()).concat('/create').concat(aClass.name.toLower()).concat('/').concat(aClass.name.toLower()).concat('-create.component.html'), false, 'UTF-8')]
<div>
	<div class="page-title" style="background: #F7F7F7;">
		<div class="title_left">
	 	[for (apClass : Class | p.packagedElement->filter(Class))]
			[if (apClass.name.startsWith('entity_name')) ]
				[for (anElementPa: Property | apClass.allOwnedElements()->filter(Property) )]
					[if anElementPa.name.equalsIgnoreCase(aClass.name)]
			<h3 >Agregar [anElementPa.default/]</h3>
					[/if]
				[/for]
			[/if]
		[/for]	
		</div>
	</div>

	<div class="x_panel">
		<div class="x_title">
	 	[for (apClass : Class | p.packagedElement->filter(Class))]
			[if (apClass.name.startsWith('entity_name')) ]
				[for (anElementPa: Property | apClass.allOwnedElements()->filter(Property) )]
					[if anElementPa.name.equalsIgnoreCase(aClass.name)]
			<h2>Datos del [anElementPa.default/]</h2>
					[/if]
				[/for]
			[/if]
		[/for]
			<div class="clearfix"></div>
		</div>

		<div class="x_content">
			<!-- start form for validation -->
			<form #[aClass.name.toLower()/]Form="ngForm" id="[aClass.name.toLower()/]Form" class="form-horizontal form-label-left" data-parsley-validate>
				<input class="form-control" #[aClass.name.toLower()/]Id="ngModel" [aClass.name.toLower()/]Id="[aClass.name.toLower()/]Id" name="[aClass.name.toLower()/]Id" type="hidden" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[aClass.name.toLower()/]Id">

[for (anAttribute: Property | getAllAttributes() -> sortedBy(lower))]
<div class="form-group">
[if not (anAttribute.name.equalsIgnoreCase('id'))]
	[comment modal/]
	[if anAttribute.type.name.startsWith('modal')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<div class="form-group text-right">
			<div class="col-lg-3">
				<div class="input-group">
					<input type="hidden" class="form-control input-md"  name="[anAttribute.name.toLower()/]Id"  ['['/]ngModelOptions[']'/]="{standalone: true}" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLowerFirst()/]Id" #[anAttribute.name.toLowerFirst()/]Id="ngModel">
					<input type="text" class="form-control" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLowerFirst()/]Item"  ['['/]ngModelOptions[']'/]="{standalone: true}" #[anAttribute.name.toLowerFirst()/]Item="ngModel" placeholder="[anAttribute.name.toUpperFirst()/]...">
					<span class="input-group-btn">
						<button class="btn btn-secondary" type="button" data-toggle="modal" data-target="#modal[anAttribute.name.toUpperFirst()/]">
							<em class="fa fa-search"></em>
						</button>
					</span>
				</div>
			</div>
		</div>
	[/if]
	[comment atributes/]
	[if anAttribute.type.name.equalsIgnoreCase('HText')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HCheckbox')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HInteger')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="number" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HDate')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HTextLong')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<textarea class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required></textarea>	
	[/if]
	[if anAttribute.type.name.startsWith('radio')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>		
		[for (anElement: Property | type.allOwnedElements()->filter(Property) -> sortedBy(lower))]	
		<div class="col-md-12"><input type="radio" aria-label="Radio button for following text input" value="[name.toLower()/]" name="[name.toLower()/]" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.type.name.replaceAll('radio', '')/]Id"> [default/]</div>		
		[/for]		
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HBoolean')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HDouble')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" ng-pattern="/^['['/]0-9]+(\.['['/]0-9[']'/]{1,2})?$/" step="0.01" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="number" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HEmail')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HCurrency')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HImage')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HFile')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>
	[/if]
	[comment notrequired/]
	[if anAttribute.type.name.startsWith('notrequired')]
		[for (anElement: Property | type.allOwnedElements()->filter(Property) )]
			[if (anElement.type.name.equalsIgnoreCase('HText'))]
		<label class="control-label" for="[anElement.name.toLower()/]">[anElement.default/]</label>
		<input class="form-control col-md-12" #[anElement.name.toLower()/]="ngModel" id="[anElement.name.toLower()/]" name="[anElement.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anElement.name.toLower()/]">
			[/if]
			[if anElement.type.name.equalsIgnoreCase('HCheckbox')]
		<label class="control-label" for="[anElement.name.toLower()/]">[anElement.default/]</label>
		<input class="form-control col-md-12" #[anElement.name.toLower()/]="ngModel" id="[anElement.name.toLower()/]" name="[anElement.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anElement.name.toLower()/]">
			[/if]
			[if anElement.type.name.equalsIgnoreCase('HInteger')]
		<label class="control-label" for="[anElement.name.toLower()/]">[anElement.default/]</label>
		<input class="form-control col-md-12" #[anElement.name.toLower()/]="ngModel" id="[anElement.name.toLower()/]" name="[anElement.name.toLower()/]" maxlength="128" type="number" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anElement.name.toLower()/]" >
			[/if]
			[if anElement.type.name.equalsIgnoreCase('HDate')]
		<label class="control-label" for="[anElement.name.toLower()/]">[anAttribute.default/]</label>
		
			[/if]
			[if anElement.type.name.equalsIgnoreCase('HTextLong')]
		<label class="control-label" for="[anElement.name.toLower()/]">[anAttribute.default/]</label>
		<textarea class="form-control col-md-12" #[anElement.name.toLower()/]="ngModel" id="[anElement.name.toLower()/]" name="[anElement.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anElement.name.toLower()/]" ></textarea>	
			[/if]
			[if anElement.type.name.startsWith('radio')]
		<label class="control-label" for="[anElement.name.toLower()/]">[anElement.default/]</label>		
				[for (anElement: Property | type.allOwnedElements()->filter(Property) -> sortedBy(lower))]	
		<div class="col-md-12"><input type="radio" aria-label="Radio button for following text input" value="[name.toLower()/]" name="[name.toLower()/]" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anElement.type.name.replaceAll('radio', '')/]Id"> [default/]</div>		
				[/for]		
			[/if]
			[if anElement.type.name.equalsIgnoreCase('HBoolean')]
		<label class="control-label" for="[anElement.name.toLower()/]">[anElement.default/]</label>
		
			[/if]
			[if anElement.type.name.equalsIgnoreCase('HDouble')]
		<label class="control-label" for="[anElement.name.toLower()/]">[anElement.default/]</label>
		<input class="form-control col-md-12" #[anElement.name.toLower()/]="ngModel" ng-pattern="/^['['/]0-9]+(\.['['/]0-9[']'/]{1,2})?$/" step="0.01" id="[anElement.name.toLower()/]" name="[anElement.name.toLower()/]" maxlength="128" type="number" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anElement.name.toLower()/]" >
			[/if]
			[if anElement.type.name.equalsIgnoreCase('HEmail')]
		<label class="control-label" for="[anElement.name.toLower()/]">[anElement.default/]</label>
		<input class="form-control col-md-12" #[anElement.name.toLower()/]="ngModel" id="[anElement.name.toLower()/]" name="[anElement.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anElement.name.toLower()/]" >
			[/if]
			[if anElement.type.name.equalsIgnoreCase('HCurrency')]
		<label class="control-label" for="[anElement.name.toLower()/]">[anElement.default/]</label>
		<input class="form-control col-md-12" #[anElement.name.toLower()/]="ngModel" id="[anElement.name.toLower()/]" name="[anElement.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anElement.name.toLower()/]" >
			[/if]
			[if anElement.type.name.equalsIgnoreCase('HImage')]
		<label class="control-label" for="[anElement.name.toLower()/]">[anElement.default/]</label>
		<input class="form-control col-md-12" #[anElement.name.toLower()/]="ngModel" id="[anElement.name.toLower()/]" name="[anElement.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anElement.name.toLower()/]" >
			[/if]
			[if anElement.type.name.equalsIgnoreCase('HFile')]
		<label class="control-label" for="[anElement.name.toLower()/]">[anElement.default/]</label>
		<input class="form-control col-md-12" #[anElement.name.toLower()/]="ngModel" id="[anElement.name.toLower()/]" name="[anElement.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anElement.name.toLower()/]" >
			[/if]
		[/for]
	[/if]
[/if]
</div>
[/for]

[comment ************* Modal *********/]
[for (p : Property | aClass.attribute)]
	[if (p.type.name.startsWith('modal'))]
<!-- Modal [p.name.toLowerCase()/] -->
<div id="modal[p.name.toUpperFirst()/]" class="modal fade"  role="dialog" data-backdrop="false" style="background: rgba(0, 0, 0, 0.31);">
	<div class="modal-dialog" style="width:60%">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close">&times;</button>
				<h4 class="modal-title">[p.name.toUpperFirst()/]</h4>
			</div>
			<div class="modal-body">
				<div class='row'>
					<div class="col-lg-6">
						<br/>
					</div>
					<div class="col-lg-6">
						<div class="input-group">
							<input type="text" class="form-control" placeholder="Search for..." name="busqueda[p.name.toLowerCase()/]" ['['/](ngModel)[']'/]="busqueda[p.name.toUpperFirst()/]">
							<span class="input-group-btn">
								<button class="btn btn-secondary" type="button"><em class="fa fa-search"></em></button>
							</span>
						</div>
					</div>
				</div>

				<div class="row">
				<table class="table table-striped table-bordered" style="border: 1px solid #dee2e6; margin:20px; width:96%;">
						<thead>
							<tr>
								<th style="max-width:10%"></th>
								[for (pa : Package | aModel.packagedElement->filter(Package))]
								[if pa.name.equalsIgnoreCase('com.softtek.acceleo.demo')]
								[for (paClass : Class | pa.packagedElement->filter(Class))]
								[if p.name.toLowerCase().equalsIgnoreCase(paClass.name)]
									[for (attribute)]
										[comment Display Result/]
										[if (type.name.startsWith('display_result'.concat(name.toLowerCase())))]
										[for (anElement: Property | type.allOwnedElements()->filter(Property) -> sortedBy(lower))]
										[if (type.name.startsWith('modal') or type.name.startsWith('radio'))]
										<th style="max-width:10%" hidden="true">[default.toUpperFirst()/]</th>
										<th style="max-width:10%">[default.toUpperFirst()/]</th>
										[/if]
										[if not (type.name.startsWith('modal') or type.name.startsWith('radio'))]
										<th style="max-width:10%">[default.toUpperFirst()/]</th>
										[/if]
										[/for]
										[/if]
									[/for]
								[/if]
								[/for]
								[/if]
								[/for]
							</tr>
						</thead>
						<tbody>
							<tr *ngFor="let [name.toLowerCase()/] of [name.toLowerCase()/]List | filter[name.toUpperFirst()/]: busqueda[name.toUpperFirst()/] | paginate: {itemsPerPage: 10, currentPage:page, id: '1'}; let i = index" >
								<td  style="max-width: 10%"><input type="checkbox" name="[name.toLowerCase()/]Id" ['['/]checked[']'/]="[name.toLowerCase()/].checked" value="{{[name.toLowerCase()/].[name.toLowerCase()/]Id}}" (click)="setClickedRow[name.toUpperFirst()/](i, [name.toLowerCase()/])"></td>
								[for (pa : Package | aModel.packagedElement->filter(Package))]
								[if pa.name.equalsIgnoreCase('com.softtek.acceleo.demo')]
								[for (paClass : Class | pa.packagedElement->filter(Class))]
								[if p.name.toLowerCase().equalsIgnoreCase(paClass.name)]
									[for (attribute)]
										[comment Display Result/]
										[if (type.name.startsWith('display_result'.concat(name.toLowerCase())))]
										[for (anElement: Property | type.allOwnedElements()->filter(Property) -> sortedBy(lower))]
											[if (type.name.startsWith('modal') or type.name.startsWith('radio'))]
										<td  style="max-width: 10%" hidden="true">{{[p.name.toLower()/].[name.toLowerCase()/]Id}}</td>
										<td  style="max-width: 10%">{{[p.name.toLower()/].[name.toLowerCase()/]Item}}</td>
											[/if]
											[if not (type.name.startsWith('modal') or type.name.startsWith('radio'))]
										<td  style="max-width: 10%">{{[p.name.toLower()/].[name.toLowerCase()/]}}</td>
											[/if]
										[/for]
										[/if]										
									[/for]
								[/if]
								[/for]
								[/if]
								[/for]															  
							</tr>
						</tbody>
					</table>

						<div align="center" style="margin-top:15px;">
							<pagination-controls (pageChange)="page = $event" id="1" maxSize="10" directionLinks="true" autoHide="false" previousLabel="<"
								nextLabel=">" screenReaderPaginationLabel="Pagination" screenReaderPageLabel="page" screenReaderCurrentLabel="You're on page">
							</pagination-controls>
						</div>

					<div class="row">
						<div class="text-right" style="padding-right:40px">
							<button type="button" class="btn btn-default" data-dismiss="modal">Regresar</button>
							<button type="button" class="btn btn-primary" data-dismiss="modal">Elegir</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

	[/if]
[/for]

				<div class="ln_solid"></div>

				<div class="col-sm-12">
					<div class="input-group">
						<div *ngIf="flagDelete">
							<button class="btn btn-danger" (click)="delete()"><span style="margin-right:10px;"  class="fa fa-trash"></span>Eliminar</button>
							<button class="btn btn-link" (click)="return([aClass.name.toLower()/]Form)"> <span style="margin-right:10px;"  class="fa fa-arrow-left"></span>Regresar</button>
						</div>
						<div *ngIf="flag && !flagDelete">
							<button class="btn btn-primary" ['['/]disabled[']'/]="![aClass.name.toLower()/]Form.valid" (click)="save()"><span style="margin-right:10px;"  class="fa fa-save"></span>Modificar</button>
							<button class="btn btn-link" (click)="return([aClass.name.toLower()/]Form)"> <span style="margin-right:10px;"  class="fa fa-arrow-left"></span>Regresar</button>
						</div>
						<div *ngIf="!flag && !flagDelete">
							<button class="btn btn-primary" ['['/]disabled[']'/]="![aClass.name.toLower()/]Form.valid" (click)="save()"><span style="margin-right:10px;"  class="fa fa-save"></span>Agregar</button>
							<button class="btn btn-link" (click)="return([aClass.name.toLower()/]Form)"><span style="margin-right:10px;"  class="fa fa-arrow-left"></span>Regresar</button>
						</div>
					</div>
				</div>
			</form>
			<!-- end form for validation -->
		</div>
	</div>
</div>

[/file]
			[/if]
		[/for]
	[/if]
[/for]

[/template]
