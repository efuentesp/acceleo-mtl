[comment encoding = UTF-8 /]
[module CrudComponentView('http://www.eclipse.org/uml2/5.0.0/UML')]


[template public generateElementCrudComponentView(aModel : Model)]
[comment @main /]

[for (p : Package | aModel.packagedElement->filter(Package))]
	[if p.name.equalsIgnoreCase('com.softtek.acceleo.demo')]	
	 	[for (aClass : Class | p.packagedElement->filter(Class))]
			[ if (aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='Crud') 
               or aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='EnumRadio')
			   or aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='EnumCheck')
			   or aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='EnumSelect')) ]

[comment * Create Seccion ****************************************************************************************************************************************************************/]
[file ('app/admin/'.concat(aClass.name.replaceAll('radio', '').toLower()).concat('/create').concat(aClass.name.replaceAll('radio', '').toLower()).concat('/').concat(aClass.name.replaceAll('radio', '').toLower()).concat('-create.component.ts'), false, 'UTF-8')]
import { Component, OnInit, ViewChild}                                     from '@angular/core';
import { Router, ActivatedRoute }                                          from '@angular/router';
import { FormGroup, FormBuilder, Validators, FormControl }                 from '@angular/forms';
import swal from 'sweetalert2';

import { Location } from '@angular/common';
import { User } from '../../user/user.component.model';

import { [name.replaceAll('radio', '').toUpperFirst()/]Service }                                  from '../../[name.replaceAll('radio', '').toLowerFirst()/]/[name.replaceAll('radio', '').toLowerFirst()/].component.service';
import { [name.replaceAll('radio', '').toUpperFirst()/] }                                         from '../../[name.replaceAll('radio', '').toLowerFirst()/]/[name.replaceAll('radio', '').toLowerFirst()/].component.model';

[for (attribute)]
	[if (type.name.startsWith('modal'))]
import { [type.name.replaceAll('modal','').toUpperFirst()/]Service }                                  from '../../[type.name.replaceAll('modal','')/]/[type.name.replaceAll('modal','')/].component.service';
import { [type.name.replaceAll('modal','').toUpperFirst()/] }                                         from '../../[type.name.replaceAll('modal','')/]/[type.name.replaceAll('modal','')/].component.model';
	[/if]
[/for]

@Component ({
    selector: 'app-view',
    templateUrl: './[name.replaceAll('radio', '').toLower()/]-create.component.html',
	styleUrls: ['['/]'./[name.replaceAll('radio', '').toLower()/]-create.component.css'[']'/]
})

export class [name.replaceAll('radio', '').toUpperFirst()/]CreateComponent implements OnInit {

    public title = 'Nuevo [name.replaceAll('radio', '').toUpperFirst()/]';
    public [name.replaceAll('radio', '').toLower()/]: [name.replaceAll('radio', '').toUpperFirst()/];
    public form: any;
    public user: User;
    public valueName: string;
    public token: string;

[for (attribute)]
	[if (type.name.startsWith('modal'))]
	public [name.replaceAll('radio', '').toLowerFirst()/]List: [type.name.replaceAll('modal','').toUpperFirst()/];
    public [name.replaceAll('radio', '').toLowerFirst()/]: [type.name.replaceAll('modal','').toUpperFirst()/];
	[/if]
[/for]

[for (attribute)]
	[if (type.name.startsWith('modal'))]
	public busqueda[type.name.replaceAll('modal','').toUpperFirst()/]='';
	filterInput[type.name.replaceAll('modal','').toUpperFirst()/] = new FormControl();
	[/if]
[/for]

    constructor(private router: Router,  
				private route: ActivatedRoute, 
				private location: Location,
				private [name.replaceAll('radio', '').toLowerFirst()/]Service: [name.replaceAll('radio', '').toUpperFirst()/]Service
[for (attribute)]
	[if (type.name.startsWith('modal'))]
	,private [name.replaceAll('radio', '').toLowerFirst()/]Service: [type.name.replaceAll('modal','').toUpperFirst()/]Service
	[/if]
[/for]
){

[for (attribute)]
[if (type.name.startsWith('modal'))]
  	 this.filterInput[type.name.replaceAll('modal','').toUpperFirst()/].valueChanges.subscribe(busqueda[type.name.replaceAll('modal','').toUpperFirst()/] => {
     this.busqueda[type.name.replaceAll('modal','').toUpperFirst()/] = busqueda[type.name.replaceAll('modal','').toUpperFirst()/];
   });
[/if]
[/for]			

	}

    ngOnInit() {
		this.[name.replaceAll('radio', '').toLower()/]Service.clear();
        this.[name.replaceAll('radio', '').toLower()/] = new [name.replaceAll('radio', '').toUpperFirst()/];

	[for (attribute)]
		[if (type.name.startsWith('modal'))]
		this.load[name.replaceAll('radio', '').toUpperFirst()/]s();
		[/if]
	[/for]
       
    } 

save(){
   this.[name.replaceAll('radio', '').toLower()/]Service.save[name.replaceAll('radio', '').toUpperFirst()/](this.[name.replaceAll('radio', '').toLower()/]).subscribe(res => {
     if (res.status == 201 || res.status == 200){
        swal('Success...', '[name.replaceAll('radio', '').toUpperFirst()/] save successfully.', 'success');
        this.router.navigate(['['/] '../manage[name.replaceAll('radio', '').toLower()/]' [']'/], { relativeTo: this.route })
     }else if (res.status == 403){
        swal('Error...', 'Usuario no tiene permiso para guardar [name.replaceAll('radio', '').toUpperFirst()/].', 'error');
     }else{
       swal('Error...', '[name.replaceAll('radio', '').toUpperFirst()/] save unsuccessfully.', 'error');
     }
   } );
}

[for (attribute)]
	[comment Foering Key/]
	[if (type.name.startsWith('modal'))]
	load[name.replaceAll('radio', '').toUpperFirst()/]s(){
  		this.[name.replaceAll('radio', '').toLowerFirst()/]Service.getAll[type.name.replaceAll('modal','').toUpperFirst()/]().subscribe(data => {
    	if (data) {
      	this.[name.replaceAll('radio', '').toLowerFirst()/]List = data;
    	}
  		}, error => {
    	swal('Error...', 'An error occurred while calling the [type.name.replaceAll('modal','').toUpperFirst()/]s.', 'error');
  	});
}

 setClickedRow[name.replaceAll('radio', '').toUpperFirst()/](index,[name.replaceAll('radio', '').toLowerFirst()/]){
	      
		  [name.replaceAll('radio', '').toLowerFirst()/].checked = ![name.replaceAll('radio', '').toLowerFirst()/].checked;

		  if ([name.replaceAll('radio', '').toLowerFirst()/].checked){
		  this.[name.replaceAll('radio', '').toLowerFirst()/]Service.set[type.name.replaceAll('modal','').toUpperFirst()/]([name.replaceAll('radio', '').toLowerFirst()/]);
		  this.[aClass.name.replaceAll('radio', '').toLowerFirst()/].[name.replaceAll('radio', '').toLowerFirst()/]Id = [name.replaceAll('radio', '').toLowerFirst()/].[name.replaceAll('radio', '').toLowerFirst()/]Id;
		  this.[aClass.name.replaceAll('radio', '').toLowerFirst()/].[name.replaceAll('radio', '').toLowerFirst()/]Item = [name.replaceAll('radio', '').toLowerFirst()/].[name.replaceAll('radio', '').toLowerFirst()/]Id + "";
	    	}else{
            this.[name.replaceAll('radio', '').toLowerFirst()/]Service.clear();
			this.[aClass.name.replaceAll('radio', '').toLowerFirst()/].[name.replaceAll('radio', '').toLowerFirst()/]Id = null;
		    this.[aClass.name.replaceAll('radio', '').toLowerFirst()/].[name.replaceAll('radio', '').toLowerFirst()/]Item = "";
		}
 }
	[/if]
[/for]

  return([name.replaceAll('radio', '').toLower()/]){
      this.location.back();
  }

  
}
[/file]
[comment * ./Create Seccion ****************************************************************************************************************************************************************/]

[comment * ./Edit Seccion ****************************************************************************************************************************************************************/]
[file ('app/admin/'.concat(aClass.name.replaceAll('radio', '').toLower()).concat('/edit').concat(aClass.name.replaceAll('radio', '').toLower()).concat('/').concat(aClass.name.replaceAll('radio', '').toLower()).concat('-edit.component.ts'), false, 'UTF-8')]
import { Component, OnInit, ViewChild}                     from '@angular/core';
import { Router, ActivatedRoute }                                          from '@angular/router';
import { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';
import swal from 'sweetalert2';
import { Location } from '@angular/common';
import { User } from '../../user/user.component.model';

import { [name.replaceAll('radio', '').toUpperFirst()/]Service }                                  from '../../[name.replaceAll('radio', '').toLowerFirst()/]/[name.replaceAll('radio', '').toLowerFirst()/].component.service';
import { [name.replaceAll('radio', '').toUpperFirst()/] }                                         from '../../[name.replaceAll('radio', '').toLowerFirst()/]/[name.replaceAll('radio', '').toLowerFirst()/].component.model';

[for (attribute)]
	[if (type.name.startsWith('modal'))]
import { [type.name.replaceAll('modal','').toUpperFirst()/]Service }                                  from '../../[type.name.replaceAll('modal','')/]/[type.name.replaceAll('modal','')/].component.service';
import { [type.name.replaceAll('modal','').toUpperFirst()/] }                                         from '../../[type.name.replaceAll('modal','')/]/[type.name.replaceAll('modal','')/].component.model';
	[/if]
[/for]


@Component ({
    selector: 'app-view',
    templateUrl: './[name.replaceAll('radio', '').toLower()/]-edit.component.html',
	styleUrls: ['['/]'./[name.replaceAll('radio', '').toLower()/]-edit.component.css'[']'/]
})

export class [name.replaceAll('radio', '').toUpperFirst()/]EditComponent implements OnInit {

	public title = 'Editar [name.replaceAll('radio', '').toUpperFirst()/]';
    public [name.replaceAll('radio', '').toLower()/]: [name.replaceAll('radio', '').toUpperFirst()/];
 	public [name.replaceAll('radio', '').toLower()/]List: [name.replaceAll('radio', '').toUpperFirst()/];
    public form: any;
    public user: User;
    public valueName: string;
    public token: string;

	public flag: boolean;
    public flagDelete: boolean;

[for (attribute)]
	[if (type.name.startsWith('modal'))]
	public [name.replaceAll('radio', '').toLowerFirst()/]List: [type.name.replaceAll('modal','').toUpperFirst()/];
    public [name.replaceAll('radio', '').toLowerFirst()/]: [type.name.replaceAll('modal','').toUpperFirst()/];
	[/if]
[/for]

[for (attribute)]
	[if (type.name.startsWith('modal'))]
	public busqueda[type.name.replaceAll('modal','').toUpperFirst()/]='';
	filterInput[type.name.replaceAll('modal','').toUpperFirst()/] = new FormControl();
	[/if]
[/for]

    constructor(private router: Router,  
				private route: ActivatedRoute, 
				private location: Location,
				private [name.replaceAll('radio', '').toLowerFirst()/]Service: [name.replaceAll('radio', '').toUpperFirst()/]Service
[for (attribute)]
	[if (type.name.startsWith('modal'))]
	,private [name.replaceAll('radio', '').toLowerFirst()/]Service: [type.name.replaceAll('modal','').toUpperFirst()/]Service
	[/if]
[/for]){

[for (attribute)]
[if (type.name.startsWith('modal'))]
 	 this.filterInput[type.name.replaceAll('modal','').toUpperFirst()/].valueChanges.subscribe(busqueda[type.name.replaceAll('modal','').toUpperFirst()/] => {
     this.busqueda[type.name.replaceAll('modal','').toUpperFirst()/] = busqueda[type.name.replaceAll('modal','').toUpperFirst()/];
   });
[/if]
[/for]			

	}	

    ngOnInit() {
        

        this.flag = this.[name.replaceAll('radio', '').toLower()/]Service.getEdit();
        this.[name.replaceAll('radio', '').toLower()/] = this.[name.replaceAll('radio', '').toLower()/]Service.get[name.replaceAll('radio', '').toUpperFirst()/]();
        this.flagDelete = this.[name.replaceAll('radio', '').toLower()/]Service.getDelete();
        
	[for (attribute)]
		[if (type.name.startsWith('modal'))]
		this.load[name.replaceAll('radio', '').toUpperFirst()/]s();
		this.loadItem[name.replaceAll('radio', '').toUpperFirst()/](this.[aClass.name.replaceAll('radio', '').toLower()/]);
		[/if]
	[/for]

    }  

save(){
   this.[name.replaceAll('radio', '').toLower()/]Service.save[name.replaceAll('radio', '').toUpperFirst()/](this.[name.replaceAll('radio', '').toLower()/]).subscribe(res => {
     if (res.status == 201 || res.status == 200){
        swal('Success...', '[name.replaceAll('radio', '').toUpperFirst()/] save successfully.', 'success');
        this.router.navigate(['['/] '../manage[name.replaceAll('radio', '').toLower()/]' [']'/], { relativeTo: this.route })
     }else if (res.status == 403){
        swal('Error...', 'Usuario no tiene permiso para guardar [name.replaceAll('radio', '').toUpperFirst()/].', 'error');
     }else{
       swal('Error...', '[name.replaceAll('radio', '').toUpperFirst()/] save unsuccessfully.', 'error');
     }
   } );
}

delete(){
  swal({
    title: "Are you sure?",
    text: "You will not be able to recover this [name.replaceAll('radio', '').toLower()/]!",
    type: "warning",
    showCancelButton: true,
    confirmButtonColor: "#DD6B55",
    confirmButtonText: "Yes, delete it!",
    cancelButtonText: "No, cancel!"
  }).then((isConfirm) => {
    if (isConfirm.value) {
      this.[name.replaceAll('radio', '').toLower()/]Service.delete[name.replaceAll('radio', '').toUpperFirst()/](this.[name.replaceAll('radio', '').toLower()/]).subscribe(res => {
        if (res.status == 201 || res.status == 200){
          swal('Success...', '[name.replaceAll('radio', '').toUpperFirst()/] item has been deleted successfully.', 'success');
          this.router.navigate(['['/] '../manage[name.replaceAll('radio', '').toLower()/]' [']'/], { relativeTo: this.route })
        }else if (res.status == 403){
          swal('Error...', 'Usuario no tiene permiso para guardar [name.replaceAll('radio', '').toUpperFirst()/].', 'error');
        }else{
          swal('Error...', '[name.replaceAll('radio', '').toUpperFirst()/] deleted unsuccessfully.', 'error');
        }
      },error =>{
        if (error.status == 500){
          swal('Warning...', '[name.replaceAll('radio', '').toUpperFirst()/] no se puede eliminar debido a que esta asociado con otra entidad.', 'warning');
        }
      }
	);
    } else {
      //swal("Cancelled", "[name.replaceAll('radio', '').toUpperFirst()/] deleted unsuccessfully", "error");
    }
  });
}

[for (attribute)]
	[comment Foering Key/]
	[if (type.name.startsWith('modal'))]
	load[name.replaceAll('radio', '').toUpperFirst()/]s(){
  		this.[name.replaceAll('radio', '').toLowerFirst()/]Service.getAll[type.name.replaceAll('modal','').toUpperFirst()/]().subscribe(data => {
    	if (data) {
      	this.[name.replaceAll('radio', '').toLowerFirst()/]List = data;
    	}
  		}, error => {
    	swal('Error...', 'An error occurred while calling the [type.name.replaceAll('modal','').toUpperFirst()/]s.', 'error');
  	});
}

 setClickedRow[name.replaceAll('radio', '').toUpperFirst()/](index,[name.replaceAll('radio', '').toLowerFirst()/]){
	      
		  [name.replaceAll('radio', '').toLowerFirst()/].checked = ![name.replaceAll('radio', '').toLowerFirst()/].checked;

		  if ([name.replaceAll('radio', '').toLowerFirst()/].checked){
		  this.[name.replaceAll('radio', '').toLowerFirst()/]Service.set[type.name.replaceAll('modal','').toUpperFirst()/]([name.replaceAll('radio', '').toLowerFirst()/]);
		  this.[aClass.name.replaceAll('radio', '').toLowerFirst()/].[name.replaceAll('radio', '').toLowerFirst()/]Id = [name.replaceAll('radio', '').toLowerFirst()/].[name.replaceAll('radio', '').toLowerFirst()/]Id;
		  this.[aClass.name.replaceAll('radio', '').toLowerFirst()/].[name.replaceAll('radio', '').toLowerFirst()/]Item = [name.replaceAll('radio', '').toLowerFirst()/].[name.replaceAll('radio', '').toLowerFirst()/]Id + "";
	    	}else{
            this.[name.replaceAll('radio', '').toLowerFirst()/]Service.clear();
			this.[aClass.name.replaceAll('radio', '').toLowerFirst()/].[name.replaceAll('radio', '').toLowerFirst()/]Id = null;
		    this.[aClass.name.replaceAll('radio', '').toLowerFirst()/].[name.replaceAll('radio', '').toLowerFirst()/]Item = "";
		}
}

loadItem[name.replaceAll('radio', '').toUpperFirst()/]([aClass.name.replaceAll('radio', '').toLowerFirst()/]){
  this.[name.replaceAll('radio', '').toLowerFirst()/]Service.get[type.name.replaceAll('modal','').toUpperFirst()/]ById([aClass.name.replaceAll('radio', '').toLowerFirst()/].[name.replaceAll('radio', '').toLowerFirst()/]Id).subscribe(data => {
    if (data) {
      this.[name.replaceAll('radio', '').toLowerFirst()/] = data;
      this.[aClass.name.replaceAll('radio', '').toLowerFirst()/].[name.replaceAll('radio', '').toLowerFirst()/]Item = this.[name.replaceAll('radio', '').toLowerFirst()/].[name.replaceAll('radio', '').toLowerFirst()/]Id +"";
    }
    }, error => {
    swal('Error...', 'An error occurred while calling the [name.replaceAll('radio', '').toLowerFirst()/]s.', 'error');
  });

}

	[/if]
[/for]


return([name.replaceAll('radio', '').toLower()/]){
  this.location.back();
}
 
}
[/file]

[comment * Manage Seccion ****************************************************************************************************************************************************************/]
[file ('app/admin/'.concat(aClass.name.replaceAll('radio', '').toLower()).concat('/manage').concat(aClass.name.replaceAll('radio', '').toLower()).concat('/').concat(aClass.name.replaceAll('radio', '').toLower()).concat('-manage.component.ts'), false, 'UTF-8')]
import { Component, OnInit, ViewChild}                     from '@angular/core';
import { Router, ActivatedRoute }                          from '@angular/router';
import { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';
import swal from 'sweetalert2';

import { Location } from '@angular/common';
import { User } from '../../user/user.component.model';

import { [name.replaceAll('radio', '').toUpperFirst()/]Service }                                  from '../../[name.replaceAll('radio', '').toLowerFirst()/]/[name.replaceAll('radio', '').toLowerFirst()/].component.service';
import { [name.replaceAll('radio', '').toUpperFirst()/] }                                         from '../../[name.replaceAll('radio', '').toLowerFirst()/]/[name.replaceAll('radio', '').toLowerFirst()/].component.model';

[for (attribute)]
	[if (type.name.startsWith('modal'))]
import { [type.name.replaceAll('modal','').toUpperFirst()/]Service }                                  from '../../[type.name.replaceAll('modal','')/]/[type.name.replaceAll('modal','')/].component.service';
import { [type.name.replaceAll('modal','').toUpperFirst()/] }                                         from '../../[type.name.replaceAll('modal','')/]/[type.name.replaceAll('modal','')/].component.model';
	[/if]
[/for]

@Component ({
    selector: 'app-view',
    templateUrl: './[name.replaceAll('radio', '').toLower()/]-manage.component.html',
	styleUrls: ['['/]'./[name.replaceAll('radio', '').toLower()/]-manage.component.css'[']'/]
})

export class [name.replaceAll('radio', '').toUpperFirst()/]ManageComponent implements OnInit {

    public form: any;
    public user: User;
    public valueName: string;
    public token: string;

    public title = 'Manage [name.replaceAll('radio', '').toUpperFirst()/]';
    public [name.replaceAll('radio', '').toLowerFirst()/]List: [name.replaceAll('radio', '').toUpperFirst()/];
    public [name.replaceAll('radio', '').toLowerFirst()/]: [name.replaceAll('radio', '').toUpperFirst()/];

  	public busqueda[name.replaceAll('radio', '').toLowerFirst()/]='';
    public filterInput[name.replaceAll('radio', '').toLowerFirst()/] = new FormControl();

 	public userAdmin: User = JSON.parse(localStorage.getItem('currentUser'));

    // Buttons 
    private searchActive: boolean = false;
    private updateActive: boolean = false;
    private createActive: boolean = false;
    private deleteActive: boolean = false;

[for (attribute)]
	[if (type.name.startsWith('modal'))]
	public [name.replaceAll('radio', '').toLowerFirst()/]List: [type.name.replaceAll('modal','').toUpperFirst()/];
    public [name.replaceAll('radio', '').toLowerFirst()/]: [type.name.replaceAll('modal','').toUpperFirst()/];
	[/if]
[/for]


[for (attribute)]
	[if (type.name.startsWith('modal'))]
	public busqueda[name.replaceAll('radio', '').toUpperFirst()/]='';
	filterInput[name.replaceAll('radio', '').toUpperFirst()/] = new FormControl();
	[/if]
[/for]


    constructor(private router: Router,  
				private route: ActivatedRoute, 
				private location: Location,
				private [name.replaceAll('radio', '').toLowerFirst()/]Service: [name.replaceAll('radio', '').toUpperFirst()/]Service
[for (attribute)]
	[if (type.name.startsWith('modal'))]
	,private [name.replaceAll('radio', '').toLowerFirst()/]Service: [type.name.replaceAll('modal','').toUpperFirst()/]Service
	[/if]
[/for]){


[for (attribute)]
	[if (type.name.startsWith('modal'))]
  	 this.filterInput[type.name.replaceAll('modal','').toUpperFirst()/].valueChanges.subscribe(busqueda[type.name.replaceAll('modal','').toUpperFirst()/] => {
     this.busqueda[type.name.replaceAll('modal','').toUpperFirst()/] = busqueda[type.name.replaceAll('modal','').toUpperFirst()/];
	   });
	[/if]
[/for]		

	}

    ngOnInit() {
      
	  // Get data user
      this.user = JSON.parse(localStorage.getItem('currentUser'));
      this.valueName = this.user.username;
      this.token = this.user.token;

      this.[name.replaceAll('radio', '').toLower()/]Service.setEdit(false);
      this.[name.replaceAll('radio', '').toLower()/]Service.setDelete(false);

      this.load[name.replaceAll('radio', '').toUpperFirst()/]s();
      this.habilita();

    }   

    load[name.replaceAll('radio', '').toUpperFirst()/]s() {
      this.[name.replaceAll('radio', '').toLower()/]Service.getAll[name.replaceAll('radio', '').toUpperFirst()/]().subscribe(data => {
        if (data) {
          this.[name.replaceAll('radio', '').toLower()/]List = data;
        }
      }, error => {
        swal('Error...', 'An error occurred while calling the [name.replaceAll('radio', '').toLower()/]s.', 'error');
      });
    }

  add(){
    this.[name.replaceAll('radio', '').toLower()/]Service.clear();
    this.router.navigate(['['/] '../create[name.replaceAll('radio', '').toLower()/]' [']'/], { relativeTo: this.route })
  }

  editar([name.replaceAll('radio', '').toLower()/]){
    this.[name.replaceAll('radio', '').toLower()/]Service.set[name.replaceAll('radio', '').toUpperFirst()/]([name.replaceAll('radio', '').toLower()/]);
    this.[name.replaceAll('radio', '').toLower()/]Service.setEdit(true);
    this.[name.replaceAll('radio', '').toLower()/]Service.setDelete(false);
    this.router.navigate(['['/] '../edit[name.replaceAll('radio', '').toLower()/]' [']'/], { relativeTo: this.route })
  }

  eliminar([name.replaceAll('radio', '').toLower()/]){
    this.[name.replaceAll('radio', '').toLower()/]Service.set[name.replaceAll('radio', '').toUpperFirst()/]([name.replaceAll('radio', '').toLower()/]);
    this.[name.replaceAll('radio', '').toLower()/]Service.setEdit(false);
    this.[name.replaceAll('radio', '').toLower()/]Service.setDelete(true);
    this.router.navigate(['['/] '../edit[name.replaceAll('radio', '').toLower()/]' [']'/], { relativeTo: this.route })
  }

  // Select row
  setClickedRow[name.replaceAll('radio', '').toUpperFirst()/](index, [name.replaceAll('radio', '').toLower()/]){
    this.[name.replaceAll('radio', '').toLower()/]Service.set[name.replaceAll('radio', '').toUpperFirst()/]([name.replaceAll('radio', '').toLower()/]);
    this.[name.replaceAll('radio', '').toLower()/]Service.setEdit(true);
    this.[name.replaceAll('radio', '').toLower()/]Service.setDelete(false);
    this.router.navigate(['['/] '../edit[name.replaceAll('radio', '').toLower()/]' [']'/], { relativeTo: this.route })
  }
  
  habilita(){
    this.userAdmin.authorities.forEach(element => {
      if (element.authority == 'ROLE_[name.replaceAll('radio', '').toUpper()/]DELETE'){
        this.deleteActive = true;
      }
      if (element.authority == 'ROLE_[name.replaceAll('radio', '').toUpper()/]CREATE'){
        this.createActive = true;
      }
      if (element.authority == 'ROLE_[name.replaceAll('radio', '').toUpper()/]UPDATE'){
        this.updateActive = true;
      }
      if (element.authority == 'ROLE_[name.replaceAll('radio', '').toUpper()/]SEARCH'){
        this.searchActive = true;
      }
    });
  }

}
[/file]
[comment * ./Manage Seccion ****************************************************************************************************************************************************************/]

			[/if]
		[/for]
	[/if]
[/for]

[/template]
