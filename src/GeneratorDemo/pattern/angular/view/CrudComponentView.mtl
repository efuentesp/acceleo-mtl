[comment encoding = UTF-8 /]
[module CrudComponentView('http://www.eclipse.org/uml2/5.0.0/UML')]


[template public generateElementCrudComponentView(aModel : Model)]
[comment @main /]

[for (p : Package | aModel.packagedElement->filter(Package))]
	[if p.name.equalsIgnoreCase('com.softtek.acceleo.demo')]	
	 	[for (aClass : Class | p.packagedElement->filter(Class))]
			[ if (aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='Crud') 
               or aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='EnumRadio')
			   or aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='EnumCheck')
			   or aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='EnumSelect')) ]

[file ('app/admin/'.concat(aClass.name.toLowerFirst()).concat('/create').concat(aClass.name.toUpperFirst()).concat('/').concat(aClass.name.toLower()).concat('-create.component.ts'), false, 'UTF-8')]
import { Component, OnInit, ViewChild}                     from '@angular/core';
import { Router, ActivatedRoute }                                          from '@angular/router';
import { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';
import swal from 'sweetalert2';

import { [name.toUpperFirst()/]Service }                                  from '../../[name.toLowerFirst()/]/[name.toLowerFirst()/].component.service';
import { [name.toUpperFirst()/] }                                         from '../../[name.toLowerFirst()/]/[name.toLowerFirst()/].component.model';

[for (attribute)]
	[comment Foering Key/]
	[if (type.name.startsWith('modal'))]
import { [name.toUpperFirst()/]Service }                                  from '../../[name.toLowerFirst()/]/[name.toLowerFirst()/].component.service';
import { [name.toUpperFirst()/] }                                         from '../../[name.toLowerFirst()/]/[name.toLowerFirst()/].component.model';
	[/if]
[/for]

[for (p : Property | aClass.attribute)]
	[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
import { [p.name.toUpperFirst()/]Service }                                  from '../../[p.name.toLowerFirst()/]/[p.name.toLowerFirst()/].component.service';
import { [p.name.toUpperFirst()/] }                                         from '../../[p.name.toLowerFirst()/]/[p.name.toLowerFirst()/].component.model';
	[/if]
[/for]

import { Location } from '@angular/common';
import { User } from '../../user/user.component.model';

@Component ({
    selector: 'app-view',
    templateUrl: './[name.toLower()/]-create.component.html',
	styleUrls: ['['/]'./[name.toLower()/]-create.component.css'[']'/]
})

export class [name.toUpperFirst()/]Component implements OnInit {

    title = 'Nuevo [name.toUpperFirst()/]';
    [name.toLowerFirst()/]List: [name.toUpperFirst()/];
    [name.toLowerFirst()/]: [name.toUpperFirst()/];
    form: any;

[for (attribute)]
	[comment Foering Key/]
	[if (type.name.startsWith('modal'))]
	[name.toLowerFirst()/]List: [name.toUpperFirst()/];
    public [name.toLowerFirst()/]: [name.toUpperFirst()/];
    public [name.toLowerFirst()/]Nombre: string = '';
	[/if]
[/for]


	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
			[p.name.toLowerFirst()/]List: [p.name.toUpperFirst()/];
		    [p.name.toLowerFirst()/]: [p.name.toUpperFirst()/];
			public [p.name.toLower()/]Nombre: string = '';
		[/if]
	[/for]

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Modal'))]
			[p.name.toLowerFirst()/]List: [p.name.toUpperFirst()/];
		    [p.name.toLowerFirst()/]: [p.name.toUpperFirst()/];
			public [p.name.toLower()/]Nombre: string = '';
		[/if]
	[/for]

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Grid'))]
  	public busqueda[aClass.name/]='';
	filterInput[aClass.name.toUpperFirst()/] = new FormControl();
	[/if]
	[/for]

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
	public busqueda[p.name.toUpperFirst()/]='';
	filterInput[p.name.toUpperFirst()/] = new FormControl();
		[/if]
	[/for]

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Modal'))]
	public busqueda[p.name.toUpperFirst()/]='';
	filterInput[p.name.toUpperFirst()/] = new FormControl();
		[/if]
	[/for]

	[for (attribute)]
		[comment Foering Key/]
		[if (type.name.startsWith('modal'))]
		public busqueda[name.toUpperFirst()/]='';
		filterInput[name.toUpperFirst()/] = new FormControl();
		[/if]
	[/for]

    public form: any;
    public user: User;
    public valueName: string;
    public token: string;

    constructor(private router: Router,  private route: ActivatedRoute, private location: Location,
				private [name.toLowerFirst()/]Service: [name.toUpperFirst()/]Service
	[for (attribute)]
		[if (type.name.startsWith('modal'))]
		,private [name.toLowerFirst()/]Service: [name.toUpperFirst()/]Service
		[/if]
	[/for]

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
		,private [p.name.toLowerFirst()/]Service: [p.name.toUpperFirst()/]Service
		[/if]
	[/for]) {
		
	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Grid'))]
  		     this.filterInput[aClass.name.toUpperFirst()/].valueChanges.subscribe(busqueda[aClass.name.toUpperFirst()/] => {
	         this.busqueda[aClass.name.toUpperFirst()/] = busqueda[aClass.name.toUpperFirst()/];
	       });
	[/if]
	[/for]

		[for (attribute)]
		[comment Foering Key/]
		[if (type.name.startsWith('modal'))]
		  	 this.filterInput[name.toUpperFirst()/].valueChanges.subscribe(busqueda[name.toUpperFirst()/] => {
	         this.busqueda[name.toUpperFirst()/] = busqueda[name.toUpperFirst()/];
	       });
		[/if]
		[/for]

	}

    ngOnInit() {


	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
        this.[p.name.toLowerFirst()/] = new [p.name.toUpperFirst()/];
        this.load[p.name.toUpperFirst()/]s();
		[/if]
	[/for]

        this.[name.toLowerFirst()/] = new [name.toUpperFirst()/];
        this.load[name.toUpperFirst()/]s();

	[for (attribute)]
		[if (type.name.startsWith('modal'))]
		this.load[name.toUpperFirst()/]s();
		[/if]
	[/for]

    }

	load[name.toUpperFirst()/]s(){
      this.[name.toLowerFirst()/]Service.getAll[name.toUpperFirst()/]().subscribe(data => {
        if (data) {
          this.[name.toLowerFirst()/]List = data;
        }
      }, error => {
        swal('Error...', 'An error occurred while calling the [name.toLowerFirst()/]s.', 'error');
      });
    }

	[for (attribute)]
		[comment Foering Key/]
		[if (type.name.startsWith('modal'))]
		load[name.toUpperFirst()/]s(){
      		this.[name.toLowerFirst()/]Service.getAll[name.toUpperFirst()/]().subscribe(data => {
        	if (data) {
          	this.[name.toLowerFirst()/]List = data;
        	}
      		}, error => {
        	swal('Error...', 'An error occurred while calling the [name.toLowerFirst()/]s.', 'error');
      	});
    }


  loadName[name.toUpperFirst()/]([aClass.name.toLower()/]){
    this.[name.toLowerFirst()/]Service.get[name.toUpperFirst()/]ById([aClass.name.toLower()/].[name.toLowerFirst()/]Id).subscribe(data => {
      if (data) {
        this.[name.toLowerFirst()/] = data;
        this.[name.toLowerFirst()/]Nombre   = this.[name.toLowerFirst()/].nombre;
      }
    }, error => {
      swal('Error...', 'Can´t found Beneficiario, change the [name.toUpperFirst()/].', 'error');
    });
  }

  setClickedRow[name.toUpperFirst()/](index, [name.toLowerFirst()/]){
    this.[aClass.name.toLower()/].[name.toLowerFirst()/]Id                   = [name.toLowerFirst()/].[name.toLowerFirst()/]Id;
    this.[name.toLowerFirst()/]Nombre                        = [name.toLowerFirst()/].nombre;
  }

		[/if]
	[/for]


    save([name.toLowerFirst()/]){
      this.[name.toLowerFirst()/]Service.save[name.toUpperFirst()/](this.[name.toLowerFirst()/]).subscribe(res => {
        if (res.status == 201 || res.status == 200){
          swal('Success...', '[name.toUpperFirst()/] save successfully.', 'success');
		  this.router.navigate(['['/]'../manage[name.toUpperFirst()/]'[']'/], { relativeTo: this.route })
        }else{
          swal('Error...', '[name.toUpperFirst()/] save unsuccessfully.', 'error');
        }
      } );
    }

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Grid'))]
		    setClickedRow[aClass.name.toUpperFirst()/](id, event){
		      this.[aClass.name.toLowerFirst()/]Service.set[aClass.name.toUpperFirst()/](event);
		    }
		[/if]
	[/for]
	
	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
		    setClickedRow[p.name.toUpperFirst()/](id, event){
			console.log('Id: ', id);
			console.log('Event: ', event);
		      this.[p.name.toLowerFirst()/]Service.set[p.name.toUpperFirst()/](event);
		    }
		[/if]
	[/for]

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
		    load[p.name.toUpperFirst()/]s() {
		      this.[p.name.toLower()/]Service.getAll[p.name.toUpperFirst()/]().subscribe(data => {
		        if (data) {
		          this.[p.name.toLower()/]List = data;
		        }
		      }, error => {
		        swal('Error...', 'An error occurred while calling the [p.name.toLower()/]s.', 'error');
		      });
		    }
		[/if]
	[/for]

	return([name.toLowerFirst()/]){
     this.location.back();
    }

	[for (attribute)]
	[if (type.name.startsWith('modal'))]
	  		setClickedRow[name.toLowerFirst()/](index, [name.toLower()/]){
			this.[aClass.name.toLower()/].[name.toLower()/]Id = [name.toLower()/].[name.toLower()/]Id;
		}
	[/if]
	[/for]
	
}

[/file]

[file ('app/admin/'.concat(aClass.name.toLowerFirst()).concat('/edit').concat(aClass.name.toUpperFirst()).concat('/').concat(aClass.name.toLower()).concat('-edit.component.ts'), false, 'UTF-8')]
import { Component, OnInit, ViewChild}                     from '@angular/core';
import { Router }                                          from '@angular/router';
import { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';
import swal from 'sweetalert2';

import { [name.toUpperFirst()/]Service }                                  from '../../[name.toLowerFirst()/]/[name.toLowerFirst()/].component.service';
import { [name.toUpperFirst()/] }                                         from '../../[name.toLowerFirst()/]/[name.toLowerFirst()/].component.model';

[for (attribute)]
	[comment Foering Key/]
	[if (type.name.startsWith('modal'))]
import { [name.toUpperFirst()/]Service }                                  from '../../[name.toLowerFirst()/]/[name.toLowerFirst()/].component.service';
import { [name.toUpperFirst()/] }                                         from '../../[name.toLowerFirst()/]/[name.toLowerFirst()/].component.model';
	[/if]
[/for]

[for (p : Property | aClass.attribute)]
	[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
import { [p.name.toUpperFirst()/]Service }                                  from '../../[p.name.toLowerFirst()/]/[p.name.toLowerFirst()/].component.service';
import { [p.name.toUpperFirst()/] }                                         from '../../[p.name.toLowerFirst()/]/[p.name.toLowerFirst()/].component.model';
	[/if]
[/for]

[for (p : Property | aClass.attribute)]
	[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Grid'))]
import { Search[aClass.name.toUpperFirst()/]Pipe }                from "../pipe/[aClass.name.toLower()/].filter.pipe";
	[/if]
[/for]

[for (p : Property | aClass.attribute)]
	[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
import { Search[p.name.toUpperFirst()/]Pipe }                from "../pipe/[p.name.toLower()/].filter.pipe";
	[/if]
[/for]

@Component ({
    selector: 'app-view',
    templateUrl: './[name.toLowerFirst()/]-edit.component.html',
	styleUrls: ['['/]'./[name.toLower()/]-create.component.css'[']'/]
})

export class [name.toUpperFirst()/]Component implements OnInit {

    title = 'Nuevo [name.toUpperFirst()/]';
    [name.toLowerFirst()/]List: [name.toUpperFirst()/];
    [name.toLowerFirst()/]: [name.toUpperFirst()/];
    form: any;

[for (attribute)]
	[comment Foering Key/]
	[if (type.name.startsWith('modal'))]
	[name.toLowerFirst()/]List: [name.toUpperFirst()/];
	[/if]
[/for]


	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
			[p.name.toLowerFirst()/]List: [p.name.toUpperFirst()/];
		    [p.name.toLowerFirst()/]: [p.name.toUpperFirst()/];
		[/if]
	[/for]

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Modal'))]
			[p.name.toLowerFirst()/]List: [p.name.toUpperFirst()/];
		    [p.name.toLowerFirst()/]: [p.name.toUpperFirst()/];
		[/if]
	[/for]

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Grid'))]
  	public busqueda[aClass.name/]='';
	filterInput[aClass.name.toUpperFirst()/] = new FormControl();
	[/if]
	[/for]

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
	public busqueda[p.name.toUpperFirst()/]='';
	filterInput[p.name.toUpperFirst()/] = new FormControl();
		[/if]
	[/for]

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Modal'))]
	public busqueda[p.name.toUpperFirst()/]='';
	filterInput[p.name.toUpperFirst()/] = new FormControl();
		[/if]
	[/for]

	[for (attribute)]
		[comment Foering Key/]
		[if (type.name.startsWith('modal'))]
		public busqueda[name.toUpperFirst()/]='';
		filterInput[name.toUpperFirst()/] = new FormControl();
		[/if]
	[/for]

    constructor(private router: Router, 
				private [name.toLowerFirst()/]Service: [name.toUpperFirst()/]Service
	[for (attribute)]
		[if (type.name.startsWith('modal'))]
		,private [name.toLowerFirst()/]Service: [name.toUpperFirst()/]Service
		[/if]
	[/for]

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
		,private [p.name.toLowerFirst()/]Service: [p.name.toUpperFirst()/]Service
		[/if]
	[/for]) {
		
	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Grid'))]
  		     this.filterInput[aClass.name.toUpperFirst()/].valueChanges.subscribe(busqueda[aClass.name.toUpperFirst()/] => {
	         this.busqueda[aClass.name.toUpperFirst()/] = busqueda[aClass.name.toUpperFirst()/];
	       });
	[/if]
	[/for]

		[for (attribute)]
		[comment Foering Key/]
		[if (type.name.startsWith('modal'))]
		  	 this.filterInput[name.toUpperFirst()/].valueChanges.subscribe(busqueda[name.toUpperFirst()/] => {
	         this.busqueda[name.toUpperFirst()/] = busqueda[name.toUpperFirst()/];
	       });
		[/if]
		[/for]

	}

    ngOnInit() {
	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
        this.[p.name.toLowerFirst()/] = this.[p.name.toLowerFirst()/]Service.get[p.name.toUpperFirst()/]();
        this.load[p.name.toUpperFirst()/]s();
		[/if]
	[/for]
        this.[name.toLowerFirst()/] = this.[name.toLowerFirst()/]Service.get[name.toUpperFirst()/]();
        this.load[name.toUpperFirst()/]s();

	[for (attribute)]
		[if (type.name.startsWith('modal'))]
		this.load[name.toUpperFirst()/]s();
		[/if]
	[/for]

    }

	load[name.toUpperFirst()/]s(){
      this.[name.toLowerFirst()/]Service.getAll[name.toUpperFirst()/]().subscribe(data => {
        if (data) {
          this.[name.toLowerFirst()/]List = data;
        }
      }, error => {
        swal('Error...', 'An error occurred while calling the [name.toLowerFirst()/]s.', 'error');
      });
    }

	[for (attribute)]
		[comment Foering Key/]
		[if (type.name.startsWith('modal'))]
		load[name.toUpperFirst()/]s(){
      		this.[name.toLowerFirst()/]Service.getAll[name.toUpperFirst()/]().subscribe(data => {
        	if (data) {
          	this.[name.toLowerFirst()/]List = data;
        	}
      		}, error => {
        	swal('Error...', 'An error occurred while calling the [name.toLowerFirst()/]s.', 'error');
      	});
    }
		[/if]
	[/for]


    save([name.toLowerFirst()/]){
      this.[name.toLowerFirst()/]Service.save[name.toUpperFirst()/](this.[name.toLowerFirst()/]).subscribe(res => {
        if (res.status == 201 || res.status == 200){
          swal('Success...', '[name.toUpperFirst()/] save successfully.', 'success');
		  this.router.navigate(['['/]'/[name.toLower().concat('_mgmnt')/]'[']'/]);
        }else{
          swal('Error...', '[name.toUpperFirst()/] save unsuccessfully.', 'error');
        }
      } );
    }
	
	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Grid'))]
		    setClickedRow[aClass.name.toUpperFirst()/](id, event){
		      this.[aClass.name.toLowerFirst()/]Service.set[aClass.name.toUpperFirst()/](event);
		    }
		[/if]
	[/for]
	
	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
		    setClickedRow[p.name.toUpperFirst()/](id, event){
			console.log('Id: ', id);
			console.log('Event: ', event);
		      this.[p.name.toLowerFirst()/]Service.set[p.name.toUpperFirst()/](event);
		    }
		[/if]
	[/for]

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
		    load[p.name.toUpperFirst()/]s() {
		      this.[p.name.toLower()/]Service.getAll[p.name.toUpperFirst()/]().subscribe(data => {
		        if (data) {
		          this.[p.name.toLower()/]List = data;
		        }
		      }, error => {
		        swal('Error...', 'An error occurred while calling the [p.name.toLower()/]s.', 'error');
		      });
		    }
		[/if]
	[/for]

	return([name.toLowerFirst()/]){
      this.router.navigate(['['/]'/[name.toLower().concat('_mgmnt')/]'[']'/]);
    }

	[for (attribute)]
	[if (type.name.startsWith('modal'))]
	  		setClickedRow[name.toLowerFirst()/](index, [name.toLower()/]){
			this.[aClass.name.toLower()/].[name.toLower()/]Id = [name.toLower()/].[name.toLower()/]Id;
		}
	[/if]
	[/for]
	
}

[/file]

[file ('app/admin/'.concat(aClass.name.toLowerFirst()).concat('/manage').concat(aClass.name.toUpperFirst()).concat('/').concat(aClass.name.toLower()).concat('-manage.component.ts'), false, 'UTF-8')]
import { Component, OnInit, ViewChild}                     from '@angular/core';
import { Router }                                          from '@angular/router';
import { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';
import swal from 'sweetalert2';

import { [name.toUpperFirst()/]Service }                                  from '../../[name.toLowerFirst()/]/[name.toLowerFirst()/].component.service';
import { [name.toUpperFirst()/] }                                         from '../../[name.toLowerFirst()/]/[name.toLowerFirst()/].component.model';

[for (attribute)]
	[comment Foering Key/]
	[if (type.name.startsWith('modal'))]
import { [name.toUpperFirst()/]Service }                                  from '../../[name.toLowerFirst()/]/[name.toLowerFirst()/].component.service';
import { [name.toUpperFirst()/] }                                         from '../../[name.toLowerFirst()/]/[name.toLowerFirst()/].component.model';
	[/if]
[/for]

[for (p : Property | aClass.attribute)]
	[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
import { [p.name.toUpperFirst()/]Service }                                  from '../../[p.name.toLowerFirst()/]/[p.name.toLowerFirst()/].component.service';
import { [p.name.toUpperFirst()/] }                                         from '../../[p.name.toLowerFirst()/]/[p.name.toLowerFirst()/].component.model';
	[/if]
[/for]

[for (p : Property | aClass.attribute)]
	[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Grid'))]
import { Search[aClass.name.toUpperFirst()/]Pipe }                from "../pipe/[aClass.name.toLower()/].filter.pipe";
	[/if]
[/for]

[for (p : Property | aClass.attribute)]
	[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
import { Search[p.name.toUpperFirst()/]Pipe }                from "../pipe/[p.name.toLower()/].filter.pipe";
	[/if]
[/for]

@Component ({
    selector: 'app-view',
    templateUrl: './[name.toLowerFirst()/]-manage.component.html',
	styleUrls: ['['/]'./[name.toLower()/]-create.component.css'[']'/]
})

export class [name.toUpperFirst()/]Component implements OnInit {

    title = 'Nuevo [name.toUpperFirst()/]';
    [name.toLowerFirst()/]List: [name.toUpperFirst()/];
    [name.toLowerFirst()/]: [name.toUpperFirst()/];
    form: any;

[for (attribute)]
	[comment Foering Key/]
	[if (type.name.startsWith('modal'))]
	[name.toLowerFirst()/]List: [name.toUpperFirst()/];
	[/if]
[/for]


	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
			[p.name.toLowerFirst()/]List: [p.name.toUpperFirst()/];
		    [p.name.toLowerFirst()/]: [p.name.toUpperFirst()/];
		[/if]
	[/for]

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Modal'))]
			[p.name.toLowerFirst()/]List: [p.name.toUpperFirst()/];
		    [p.name.toLowerFirst()/]: [p.name.toUpperFirst()/];
		[/if]
	[/for]

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Grid'))]
  	public busqueda[aClass.name/]='';
	filterInput[aClass.name.toUpperFirst()/] = new FormControl();
	[/if]
	[/for]

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
	public busqueda[p.name.toUpperFirst()/]='';
	filterInput[p.name.toUpperFirst()/] = new FormControl();
		[/if]
	[/for]

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Modal'))]
	public busqueda[p.name.toUpperFirst()/]='';
	filterInput[p.name.toUpperFirst()/] = new FormControl();
		[/if]
	[/for]

	[for (attribute)]
		[comment Foering Key/]
		[if (type.name.startsWith('modal'))]
		public busqueda[name.toUpperFirst()/]='';
		filterInput[name.toUpperFirst()/] = new FormControl();
		[/if]
	[/for]

    constructor(private router: Router, 
				private [name.toLowerFirst()/]Service: [name.toUpperFirst()/]Service
	[for (attribute)]
		[if (type.name.startsWith('modal'))]
		,private [name.toLowerFirst()/]Service: [name.toUpperFirst()/]Service
		[/if]
	[/for]

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
		,private [p.name.toLowerFirst()/]Service: [p.name.toUpperFirst()/]Service
		[/if]
	[/for]) {
		
	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Grid'))]
  		     this.filterInput[aClass.name.toUpperFirst()/].valueChanges.subscribe(busqueda[aClass.name.toUpperFirst()/] => {
	         this.busqueda[aClass.name.toUpperFirst()/] = busqueda[aClass.name.toUpperFirst()/];
	       });
	[/if]
	[/for]

		[for (attribute)]
		[comment Foering Key/]
		[if (type.name.startsWith('modal'))]
		  	 this.filterInput[name.toUpperFirst()/].valueChanges.subscribe(busqueda[name.toUpperFirst()/] => {
	         this.busqueda[name.toUpperFirst()/] = busqueda[name.toUpperFirst()/];
	       });
		[/if]
		[/for]

	}

    ngOnInit() {
	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
        this.[p.name.toLowerFirst()/] = this.[p.name.toLowerFirst()/]Service.get[p.name.toUpperFirst()/]();
        this.load[p.name.toUpperFirst()/]s();
		[/if]
	[/for]
        this.[name.toLowerFirst()/] = this.[name.toLowerFirst()/]Service.get[name.toUpperFirst()/]();
        this.load[name.toUpperFirst()/]s();

	[for (attribute)]
		[if (type.name.startsWith('modal'))]
		this.load[name.toUpperFirst()/]s();
		[/if]
	[/for]

    }

	load[name.toUpperFirst()/]s(){
      this.[name.toLowerFirst()/]Service.getAll[name.toUpperFirst()/]().subscribe(data => {
        if (data) {
          this.[name.toLowerFirst()/]List = data;
        }
      }, error => {
        swal('Error...', 'An error occurred while calling the [name.toLowerFirst()/]s.', 'error');
      });
    }

	[for (attribute)]
		[comment Foering Key/]
		[if (type.name.startsWith('modal'))]
		load[name.toUpperFirst()/]s(){
      		this.[name.toLowerFirst()/]Service.getAll[name.toUpperFirst()/]().subscribe(data => {
        	if (data) {
          	this.[name.toLowerFirst()/]List = data;
        	}
      		}, error => {
        	swal('Error...', 'An error occurred while calling the [name.toLowerFirst()/]s.', 'error');
      	});
    }
		[/if]
	[/for]


    save([name.toLowerFirst()/]){
      this.[name.toLowerFirst()/]Service.save[name.toUpperFirst()/](this.[name.toLowerFirst()/]).subscribe(res => {
        if (res.status == 201 || res.status == 200){
          swal('Success...', '[name.toUpperFirst()/] save successfully.', 'success');
		  this.router.navigate(['['/]'/[name.toLower().concat('_mgmnt')/]'[']'/]);
        }else{
          swal('Error...', '[name.toUpperFirst()/] save unsuccessfully.', 'error');
        }
      } );
    }
	
	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Grid'))]
		    setClickedRow[aClass.name.toUpperFirst()/](id, event){
		      this.[aClass.name.toLowerFirst()/]Service.set[aClass.name.toUpperFirst()/](event);
		    }
		[/if]
	[/for]
	
	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
		    setClickedRow[p.name.toUpperFirst()/](id, event){
			console.log('Id: ', id);
			console.log('Event: ', event);
		      this.[p.name.toLowerFirst()/]Service.set[p.name.toUpperFirst()/](event);
		    }
		[/if]
	[/for]

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
		    load[p.name.toUpperFirst()/]s() {
		      this.[p.name.toLower()/]Service.getAll[p.name.toUpperFirst()/]().subscribe(data => {
		        if (data) {
		          this.[p.name.toLower()/]List = data;
		        }
		      }, error => {
		        swal('Error...', 'An error occurred while calling the [p.name.toLower()/]s.', 'error');
		      });
		    }
		[/if]
	[/for]

	return([name.toLowerFirst()/]){
      this.router.navigate(['['/]'/[name.toLower().concat('_mgmnt')/]'[']'/]);
    }

	[for (attribute)]
	[if (type.name.startsWith('modal'))]
	  		setClickedRow[name.toLowerFirst()/](index, [name.toLower()/]){
			this.[aClass.name.toLower()/].[name.toLower()/]Id = [name.toLower()/].[name.toLower()/]Id;
		}
	[/if]
	[/for]
	
}

[/file]

			[/if]
		[/for]
	[/if]
[/for]

[/template]
