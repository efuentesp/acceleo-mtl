[comment encoding = UTF-8 /]
[module HtmlView('http://www.eclipse.org/uml2/5.0.0/UML')]
[import GeneratorDemo::pattern::angular::view::HtmlModalView/]

[template public generateElementHtmlView(aModel : Model)]
[comment @main /]

[for (p : Package | aModel.packagedElement->filter(Package))]
	[if p.name.equalsIgnoreCase('com.softtek.acceleo.demo')]	
	 	[for (aClass : Class | p.packagedElement->filter(Class))]
			[ if (aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='Crud')) ]

[file ('app/admin/'.concat(aClass.name.toLower()).concat('/create').concat(aClass.name.toLower()).concat('/').concat(aClass.name.toLower()).concat('-create.component.html'), false, 'UTF-8')]
<div>
	<div class="page-title" style="background: #F7F7F7;">
		<div class="title_left">
			<h3 *ngIf="flagDelete">Eliminar [aClass.name.toLowerFirst()/]</h3>
			<h3 *ngIf="flag && !flagDelete">Actualizar [aClass.name.toLowerFirst()/]</h3>
			<h3 *ngIf="!flag && !flagDelete">Agregar [aClass.name.toLowerFirst()/]</h3>
		</div>
	</div>

	<div class="x_panel">
		<div class="x_title">
			<h2>Datos del [aClass.name.toLower()/]</h2>
			<div class="clearfix"></div>
		</div>

		<div class="x_content">
			<!-- start form for validation -->
			<form #[aClass.name.toLower()/]Form="ngForm" id="[aClass.name.toLower()/]Form" class="form-horizontal form-label-left" data-parsley-validate>
				<input class="form-control" #[aClass.name.toLower()/]Id="ngModel" [aClass.name.toLower()/]Id="[aClass.name.toLower()/]Id" name="[aClass.name.toLower()/]Id" type="hidden" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[aClass.name.toLower()/]Id">


[for (anAttribute: Property | getAllAttributes() -> sortedBy(lower))]
<div class="form-group">
[if not (anAttribute.name.equalsIgnoreCase('id'))]
	[if anAttribute.type.name.startsWith('modal')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<div class="form-group text-right">
			<div class="col-lg-3">
				<div class="input-group">
					<input type="hidden" class="form-control input-md"  name="[anAttribute.name.toLower()/]Id"  ['['/]ngModelOptions[']'/]="{standalone: true}" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLowerFirst()/]Id" #[anAttribute.name.toLowerFirst()/]Id="ngModel">
					<input type="text" class="form-control" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLowerFirst()/]Item"  ['['/]ngModelOptions[']'/]="{standalone: true}" #[anAttribute.name.toLowerFirst()/]Item="ngModel" placeholder="[anAttribute.name.toUpperFirst()/]...">
					<span class="input-group-btn">
						<button class="btn btn-secondary" type="button" data-toggle="modal" data-target="#modal[anAttribute.name.toUpperFirst()/]">
							<em class="fa fa-search"></em>
						</button>
					</span>
				</div>
			</div>
		</div>
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HText')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HCheckbox')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HInteger')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="number" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HDate')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HTextLong')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<textarea class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required></textarea>	
	[/if]
	[if anAttribute.type.name.startsWith('radio')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		
			[for (anElement: Property | type.allOwnedElements()->filter(Property) -> sortedBy(lower))]	
			<div class="col-md-12"><input type="radio" aria-label="Radio button for following text input" value="[name.toLower()/]" name="[name.toLower()/]" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.type.name/]Id"> [default/]</div>		
			[/for]		
	
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HBoolean')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HDouble')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" ng-pattern="/^['['/]0-9]+(\.['['/]0-9[']'/]{1,2})?$/" step="0.01" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="number" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HEmail')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HCurrency')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HImage')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HFile')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>
	[/if]
[/if]
</div>
[/for]



[comment ************* Modal *********/]
[for (p : Property | aClass.attribute)]
	[if (p.type.name.startsWith('modal'))]
<!-- Modal [p.name.toLowerCase()/] -->
<div id="modal[p.name.toUpperFirst()/]" class="modal fade"  role="dialog" data-backdrop="false" style="background: rgba(0, 0, 0, 0.31);">
	<div class="modal-dialog" style="width:60%">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal">&times;</button>
				<h4 class="modal-title">[p.name.toUpperFirst()/]</h4>
			</div>
			<div class="modal-body">
				<div class='row'>
					<div class="col-lg-6">
						<br/>
					</div>
					<div class="col-lg-6">
						<div class="input-group">
							<input type="text" class="form-control" placeholder="Search for..." name="busqueda[p.name.toLowerCase()/]" ['['/](ngModel)[']'/]="busqueda[p.name.toUpperFirst()/]">
							<span class="input-group-btn">
								<button class="btn btn-secondary" type="button"><em class="fa fa-search"></em></button>
							</span>
						</div>
					</div>
				</div>

				<div class="row">
				<table class="table table-striped table-bordered" style="border: 1px solid #dee2e6; margin:20px; width:96%;">
						<thead>
							<tr>
								[for (pa : Package | aModel.packagedElement->filter(Package))]
								[if pa.name.equalsIgnoreCase('com.softtek.acceleo.demo')]
								[for (paClass : Class | pa.packagedElement->filter(Class))]
								[if p.name.toLowerCase().equalsIgnoreCase(paClass.name)]
									[for (anAttribute: Property | paClass.getAllAttributes())]
										[if not(anAttribute.name.equalsIgnoreCase('id'))]
										<th>[anAttribute.name.toUpperFirst()/]</th>
										[/if]
									[/for]
								[/if]
								[/for]
								[/if]
								[/for]
							</tr>
						</thead>
						<tbody>
							<tr *ngFor="let [name.toLowerCase()/] of [name.toLowerCase()/]List | filter[name.toUpperFirst()/]: busqueda[name.toUpperFirst()/] | paginate: {itemsPerPage: 10, currentPage:page, id: '1'}; let i = index" data-dismiss="modal" (click)="setClickedRow[name.toUpperFirst()/](i, [name.toLowerCase()/])" >
								[for (pa : Package | aModel.packagedElement->filter(Package))]
								[if pa.name.equalsIgnoreCase('com.softtek.acceleo.demo')]
								[for (paClass : Class | pa.packagedElement->filter(Class))]
								[if p.name.toLowerCase().equalsIgnoreCase(paClass.name)]
									[for (anAttribute: Property | paClass.getAllAttributes())]
										[if not(anAttribute.name.equalsIgnoreCase('id'))]
													[if (anAttribute.type.name = ('HText')
														or anAttribute.type.name = ('HTextLong')
														or type.name = ('HBoolean')
														or type.name = ('HDouble')
														or type.name = ('HEmail')
														or type.name = ('HCurrency') 
														or type.name = ('HFile')
														or type.name = ('HImage')
)]
												<td>{{[p.name.toLowerCase()/].[anAttribute.name.toLowerCase()/]}}</td>
													[/if]
													[if not (anAttribute.type.name = ('HText') or anAttribute.type.name.startsWith('modal') 
		or type.name = ('HCheckbox') 
		or type.name = ('HInteger') 
		or type.name = ('HDate')
		or type.name = ('HTextLong') 
		or type.name = ('HRadio')
		or type.name = ('HBoolean')
		or type.name = ('HDouble')
		or type.name = ('HEmail')
		or type.name = ('HCurrency') 
		or type.name = ('HImage')
		or type.name = ('HFile')	)]
												<td>{{[p.name.toLowerCase()/].[anAttribute.name.toLowerCase()/]Id}}</td>
													[/if]
													[if (anAttribute.type.name.startsWith('modal'))]
												<td>{{[p.name.toLowerCase()/].[anAttribute.name.toLowerCase()/]Id}}</td>
													[/if]
										[/if]
									[/for]
								[/if]
								[/for]
								[/if]
								[/for]															  
							</tr>
						</tbody>
					</table>

						<div align="center" style="margin-top:15px;">
							<pagination-controls (pageChange)="page = $event" id="1" maxSize="10" directionLinks="true" autoHide="false" previousLabel="<"
								nextLabel=">" screenReaderPaginationLabel="Pagination" screenReaderPageLabel="page" screenReaderCurrentLabel="You're on page">
							</pagination-controls>
						</div>

					<div class="row">
						<div class="text-right" style="padding-right:40px">
							<button type="button" class="btn btn-default" data-dismiss="modal">Regresar</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

	[/if]
[/for]

				<div class="ln_solid"></div>

				<div class="col-sm-12">
					<div class="input-group">
						<div *ngIf="flagDelete">
							<button class="btn btn-danger" (click)="delete()"><span style="margin-right:10px;"  class="fa fa-trash"></span>Eliminar</button>
							<button class="btn btn-link" (click)="return([aClass.name.toLower()/]Form)"> <span style="margin-right:10px;"  class="fa fa-arrow-left"></span>Regresar</button>
						</div>
						<div *ngIf="flag && !flagDelete">
							<button class="btn btn-primary" ['['/]disabled[']'/]="![aClass.name.toLower()/]Form.valid" (click)="save()"><span style="margin-right:10px;"  class="fa fa-save"></span>Modificar</button>
							<button class="btn btn-link" (click)="return([aClass.name.toLower()/]Form)"> <span style="margin-right:10px;"  class="fa fa-arrow-left"></span>Regresar</button>
						</div>
						<div *ngIf="!flag && !flagDelete">
							<button class="btn btn-primary" ['['/]disabled[']'/]="![aClass.name.toLower()/]Form.valid" (click)="save()"><span style="margin-right:10px;"  class="fa fa-save"></span>Agregar</button>
							<button class="btn btn-link" (click)="return([aClass.name.toLower()/]Form)"><span style="margin-right:10px;"  class="fa fa-arrow-left"></span>Regresar</button>
						</div>
					</div>
				</div>
			</form>
			<!-- end form for validation -->
		</div>
	</div>
</div>

[/file]








[file ('app/admin/'.concat(aClass.name.toLower()).concat('/edit').concat(aClass.name.toLower()).concat('/').concat(aClass.name.toLower()).concat('-edit.component.html'), false, 'UTF-8')]
<div>
	<div class="page-title" style="background: #F7F7F7;">
		<div class="title_left">
			<h3 *ngIf="flagDelete">Eliminar [aClass.name.toLowerFirst()/]</h3>
			<h3 *ngIf="flag && !flagDelete">Actualizar [aClass.name.toLowerFirst()/]</h3>
			<h3 *ngIf="!flag && !flagDelete">Agregar [aClass.name.toLowerFirst()/]</h3>
		</div>
	</div>

	<div class="x_panel">
		<div class="x_title">
			<h2>Datos del [aClass.name.toLower()/]</h2>
			<div class="clearfix"></div>
		</div>

		<div class="x_content">
			<!-- start form for validation -->
			<form #[aClass.name.toLower()/]Form="ngForm" id="[aClass.name.toLower()/]Form" class="form-horizontal form-label-left" data-parsley-validate>
				<input class="form-control" #[aClass.name.toLower()/]Id="ngModel" [aClass.name.toLower()/]Id="[aClass.name.toLower()/]Id" name="[aClass.name.toLower()/]Id" type="hidden" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[aClass.name.toLower()/]Id">


[for (anAttribute: Property | getAllAttributes() -> sortedBy(lower))]
<div class="form-group">
[if not (anAttribute.name.equalsIgnoreCase('id'))]

	[if anAttribute.type.name.startsWith('modal')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<div class="form-group text-right">
			<div class="col-lg-3">
				<div class="input-group">
					<input type="hidden" class="form-control input-md"  name="[anAttribute.name.toLower()/]Id"  ['['/]ngModelOptions[']'/]="{standalone: true}" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLowerFirst()/]Id" #[anAttribute.name.toLowerFirst()/]Id="ngModel">
					<input *ngIf="flagDelete" type="text" class="form-control" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLowerFirst()/]Item"  ['['/]ngModelOptions[']'/]="{standalone: true}" #[anAttribute.name.toLowerFirst()/]Item="ngModel" placeholder="[anAttribute.name.toUpperFirst()/]..." readonly="true">
					<input *ngIf="!flagDelete" type="text" class="form-control" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLowerFirst()/]Item"  ['['/]ngModelOptions[']'/]="{standalone: true}" #[anAttribute.name.toLowerFirst()/]Item="ngModel" placeholder="[anAttribute.name.toUpperFirst()/]...">
					<span class="input-group-btn">
						<button *ngIf="flagDelete" disabled class="btn btn-secondary" type="button" data-toggle="modal" data-target="#modal[anAttribute.name.toUpperFirst()/]">
							<em class="fa fa-search"></em>
						</button>
						<button *ngIf="!flagDelete" class="btn btn-secondary" type="button" data-toggle="modal" data-target="#modal[anAttribute.name.toUpperFirst()/]">
							<em class="fa fa-search"></em>
						</button>
					</span>
				</div>
			</div>
		</div>
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HText')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input *ngIf="flagDelete" class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" readonly="true">
		<input *ngIf="!flagDelete" class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HCheckbox')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input *ngIf="flagDelete" class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="number" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" readonly="true">					
		<input *ngIf="!flagDelete" class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="number" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>			
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HInteger')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input *ngIf="flagDelete" class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="number" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" readonly="true">
		<input *ngIf="!flagDelete" class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="number" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HDate')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HTextLong')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<textarea *ngIf="flagDelete" class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" readonly="true"></textarea>	
		<textarea *ngIf="!flagDelete" class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required></textarea>	
	[/if]
	[if anAttribute.type.name.startsWith('radio')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		
			[for (anElement: Property | type.allOwnedElements()->filter(Property) -> sortedBy(lower))]	
				<div class="col-md-12"><input *ngIf="flagDelete"  type="radio" aria-label="Radio button for following text input" value="[name.toLower()/]" name="[name.toLower()/]" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.type.name/]Id"  disabled="true"> [default/] </div>		
				<div class="col-md-12"><input *ngIf="!flagDelete" type="radio" aria-label="Radio button for following text input" value="[name.toLower()/]" name="[name.toLower()/]" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.type.name/]Id"> [default/] </div>
			[/for]		
	
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HBoolean')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HDouble')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input *ngIf="flagDelete" class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" ng-pattern="/^['['/]0-9]+(\.['['/]0-9[']'/]{1,2})?$/" step="0.01" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="number" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" readonly="true">
		<input *ngIf="!flagDelete" class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" ng-pattern="/^['['/]0-9]+(\.['['/]0-9[']'/]{1,2})?$/" step="0.01" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="number" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HEmail')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input *ngIf="flagDelete" class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" readonly="true">
		<input *ngIf="!flagDelete" class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HCurrency')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input *ngIf="flagDelete" class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="number" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" readonly="true">
		<input *ngIf="!flagDelete" class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="number" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HImage')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>
	[/if]
	[if anAttribute.type.name.equalsIgnoreCase('HFile')]
		<label class="control-label" for="[anAttribute.name.toLower()/]">[anAttribute.default/]<span class="required">*</span></label>
		<input class="form-control col-md-12" #[anAttribute.name.toLower()/]="ngModel" id="[anAttribute.name.toLower()/]" name="[anAttribute.name.toLower()/]" maxlength="128" type="text" ['['/](ngModel)[']'/]="[aClass.name.toLower()/].[anAttribute.name.toLower()/]" required>
	[/if]
[/if]
</div>
[/for]



[comment ************* Modal *********/]
[for (p : Property | aClass.attribute)]
	[if (p.type.name.startsWith('modal'))]
<!-- Modal [p.name.toLowerCase()/] -->
<div id="modal[p.name.toUpperFirst()/]" class="modal fade"  role="dialog" data-backdrop="false" style="background: rgba(0, 0, 0, 0.31);">
	<div class="modal-dialog" style="width:60%">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal">&times;</button>
				<h4 class="modal-title">[p.name.toUpperFirst()/]</h4>
			</div>
			<div class="modal-body">
				<div class='row'>
					<div class="col-lg-6">
						<br/>
					</div>
					<div class="col-lg-6">
						<div class="input-group">
							<input type="text" class="form-control" placeholder="Search for..." name="busqueda[p.name.toLowerCase()/]" ['['/](ngModel)[']'/]="busqueda[p.name.toUpperFirst()/]">
							<span class="input-group-btn">
								<button class="btn btn-secondary" type="button"><em class="fa fa-search"></em></button>
							</span>
						</div>
					</div>
				</div>

				<div class="row">
				<table class="table table-striped table-bordered" style="border: 1px solid #dee2e6; margin:20px; width:96%;">
						<thead>
							<tr>
								[for (pa : Package | aModel.packagedElement->filter(Package))]
								[if pa.name.equalsIgnoreCase('com.softtek.acceleo.demo')]
								[for (paClass : Class | pa.packagedElement->filter(Class))]
								[if p.name.toLowerCase().equalsIgnoreCase(paClass.name)]
									[for (anAttribute: Property | paClass.getAllAttributes())]
										[if not(anAttribute.name.equalsIgnoreCase('id'))]
										<th>[anAttribute.name.toUpperFirst()/]</th>
										[/if]
									[/for]
								[/if]
								[/for]
								[/if]
								[/for]
							</tr>
						</thead>
						<tbody>
							<tr *ngFor="let [name.toLowerCase()/] of [name.toLowerCase()/]List | filter[name.toUpperFirst()/]: busqueda[name.toUpperFirst()/] | paginate: {itemsPerPage: 10, currentPage:page, id: '1'}; let i = index" data-dismiss="modal" (click)="setClickedRow[name.toUpperFirst()/](i, [name.toLowerCase()/])" >
								[for (pa : Package | aModel.packagedElement->filter(Package))]
								[if pa.name.equalsIgnoreCase('com.softtek.acceleo.demo')]
								[for (paClass : Class | pa.packagedElement->filter(Class))]
								[if p.name.toLowerCase().equalsIgnoreCase(paClass.name)]
									[for (anAttribute: Property | paClass.getAllAttributes())]
										[if not(anAttribute.name.equalsIgnoreCase('id'))]
													[if (anAttribute.type.name = ('HText'))]
												<td>{{[p.name.toLowerCase()/].[anAttribute.name.toLowerCase()/]}}</td>
													[/if]
													[if not (anAttribute.type.name = ('HText') or anAttribute.type.name.startsWith('modal')
		or type.name = ('HCheckbox') 
		or type.name = ('HInteger') 
		or type.name = ('HDate')
		or type.name = ('HTextLong') 
		or type.name = ('HRadio')
		or type.name = ('HBoolean')
		or type.name = ('HDouble')
		or type.name = ('HEmail')
		or type.name = ('HCurrency')
		or type.name = ('HImage')
		or type.name = ('HFile')	
 )]
												<td>{{[p.name.toLowerCase()/].[anAttribute.name.toLowerCase()/]Id}}</td>
													[/if]
													[if (anAttribute.type.name.startsWith('modal'))]
												<td>{{[p.name.toLowerCase()/].[anAttribute.name.toLowerCase()/]Id}}</td>
													[/if]
										[/if]
									[/for]
								[/if]
								[/for]
								[/if]
								[/for]															  
							</tr>
						</tbody>
					</table>

						<div align="center" style="margin-top:15px;">
							<pagination-controls (pageChange)="page = $event" id="1" maxSize="10" directionLinks="true" autoHide="false" previousLabel="<"
								nextLabel=">" screenReaderPaginationLabel="Pagination" screenReaderPageLabel="page" screenReaderCurrentLabel="You're on page">
							</pagination-controls>
						</div>

					<div class="row">
						<div class="text-right" style="padding-right:40px">
							<button type="button" class="btn btn-default" data-dismiss="modal">Regresar</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>


            
	[/if]
[/for]

				<div class="ln_solid"></div>

				<div class="col-sm-12">
					<div class="input-group">
						<div *ngIf="flagDelete">
							<button class="btn btn-danger" (click)="delete()"><span style="margin-right:10px;"  class="fa fa-trash"></span>Eliminar</button>
							<button class="btn btn-link" (click)="return([aClass.name.toLower()/]Form)"> <span style="margin-right:10px;"  class="fa fa-arrow-left"></span>Regresar</button>
						</div>
						<div *ngIf="flag && !flagDelete">
							<button class="btn btn-primary" ['['/]disabled[']'/]="![aClass.name.toLower()/]Form.valid" (click)="save()"><span style="margin-right:10px;"  class="fa fa-save"></span>Modificar</button>
							<button class="btn btn-link" (click)="return([aClass.name.toLower()/]Form)"> <span style="margin-right:10px;"  class="fa fa-arrow-left"></span>Regresar</button>
						</div>
						<div *ngIf="!flag && !flagDelete">
							<button class="btn btn-primary" ['['/]disabled[']'/]="![aClass.name.toLower()/]Form.valid" (click)="save()"><span style="margin-right:10px;"  class="fa fa-save"></span>Agregar</button>
							<button class="btn btn-link" (click)="return([aClass.name.toLower()/]Form)"><span style="margin-right:10px;"  class="fa fa-arrow-left"></span>Regresar</button>
						</div>
					</div>
				</div>
			</form>
			<!-- end form for validation -->
		</div>
	</div>
</div>
[/file]












[file ('app/admin/'.concat(aClass.name.toLower()).concat('/manage').concat(aClass.name.toLower()).concat('/').concat(aClass.name.toLower()).concat('-manage.component.html'), false, 'UTF-8')]
<!-- principal -->
<div>
	<!-- page-title -->
	<div class="page-title" style="background: #F7F7F7;">
		<div class="title_left">
			<h3>Administrar [aClass.name.toUpperFirst()/]</h3>
		</div>
	</div>
	<!-- ./page-title -->

	<!-- x_panel -->
	<div class="x_panel">
		<div class="x_content">
			<form #[aClass.name.toLower()/]MngForm="ngForm" class="editForm" novalidate>
				
				<!-- row -->
				<div class='row'>
					<div class="col-lg-6">
						<button *ngIf="createActive" class="btn btn-primary" (click)="add()"><span class="fa fa-plus"></span></button>
					</div>
					<div class="col-lg-6">
						<div class="input-group">
							<input type="text" class="form-control" placeholder="Criterios de busqueda..." name="busqueda[aClass.name.toUpperFirst()/]" ['['/](ngModel)[']'/]="busqueda[aClass.name.toUpperFirst()/]">
							<span class="input-group-btn">
								<button type="button" class="btn btn-default"><em class="fa fa-search"></em></button>
							</span>
						</div>
					</div>
				</div>
				<!-- /.row -->

				<br/>
				<!-- row -->
				<div class="row">
					<div class="col-md-12 col-sm-12 col-xs-12">
						<div class="x_panel">
							
							<div class="x_title">
								<h2>Resultados de la busqueda</h2>
								<div class="clearfix"></div>
							</div>
						
							<div class="x_content table-responsive">
								<br/>

								<!-- table -->
								<table id="datatable" class="table table-striped" style="resizable = true;">
									<thead>
										<tr>
										[for (anAttribute: Property | getAllAttributes() -> sortedBy(lower))]
											[if not(anAttribute.name.equalsIgnoreCase('id'))]
											<th style="max-width:10%">[anAttribute.name.toUpperFirst()/]</th>
											[/if]
										[/for]
										<th style="max-width:20%">Acciones</th>
										</tr>
									</thead>
									<tbody>
										<tr *ngFor="let [name.toLowerCase()/] of [name.toLowerCase()/]List | filter[aClass.name.toUpperFirst()/]: busqueda[aClass.name.toUpperFirst()/] | paginate: {itemsPerPage: 10, currentPage:page, id: '1'}; let i = index" (click)="setClickedRow[name.toUpperFirst()/](i, [name.toLowerCase()/])" >
											[for (anAttribute: Property | getAllAttributes() -> sortedBy(lower))]
												[if not(anAttribute.name.equalsIgnoreCase('id'))]	
													[if (anAttribute.type.name = ('HText') 
														or anAttribute.type.name = ('HInteger')
														or anAttribute.type.name = ('HTextLong')
														or type.name = ('HBoolean')
														or type.name = ('HDouble')
														or type.name = ('HEmail')
														or type.name = ('HCurrency') 
														or type.name = ('HFile')
														or type.name = ('HImage')
)]
												<td  style="max-width: 10%">{{[aClass.name.toLower()/].[anAttribute.name.toLowerCase()/]}}</td>
													[/if]
													[if not (anAttribute.type.name = ('HText') or anAttribute.type.name.startsWith('modal')
		or type.name = ('HCheckbox') 
		or type.name = ('HInteger') 
		or type.name = ('HDate')
		or type.name = ('HTextLong') 
		or type.name = ('HRadio')
		or type.name = ('HBoolean')
		or type.name = ('HDouble')
		or type.name = ('HEmail')
		or type.name = ('HCurrency') 
		or type.name = ('HFile')
		or type.name = ('HImage')
)]
												<td  style="max-width: 10%">{{[aClass.name.toLower()/].[anAttribute.name.toLowerCase()/]Id}}</td>
													[/if]
													[if (anAttribute.type.name.startsWith('modal'))]
												<td  style="max-width: 10%">{{[aClass.name.toLower()/].[anAttribute.name.toLowerCase()/]Id}}</td>
													[/if]
												[/if]
											[/for]
											<td style="max-width: 20%">															
												<div class="container">
												<button *ngIf="updateActive" class="btn btn-default" (click)="editar([aClass.name.toLower()/])"><span class="fa fa-pencil"></span></button>
												<button *ngIf="deleteActive" class="btn btn-default" (click)="eliminar([aClass.name.toLower()/])"><span class="fa fa-trash"></span></button>
												</div>
											</td>
										</tr>
									</tbody>
								</table>
								<!-- ./table -->

								<div align="row" align="right">
									<div align="left" style="margin-top:15px; background: #DDDDDD; width: 35%; position: relative;">
										<pagination-controls (pageChange)="page = $event" id="paginationTableAfiliado" maxSize="10" directionLinks="true" autoHide="false" previousLabel="Anterior" nextLabel="Siguiente" screenReaderPaginationLabel="Pagination" screenReaderPageLabel="page" screenReaderCurrentLabel="You're on page">
										</pagination-controls>
									</div>
								</div>
							</div>

						</div>
					</div>
					<!-- /.row -->

				</div>
			</form>
		</div>
	</div>
	<!-- /.x_panel -->
</div>
<!-- /.principal -->
[/file]

[comment Style/]
[file ('app/admin/'.concat(aClass.name.toLower()).concat('/create').concat(aClass.name.toLower()).concat('/').concat(aClass.name.toLower()).concat('-create.component.css'), false, 'UTF-8')]
.required{
  color: #FF0000;
}

.horizontalScroll{
  width: 100px; 
  overflow-x: scroll ;
}
[/file]

[file ('app/admin/'.concat(aClass.name.toLower()).concat('/edit').concat(aClass.name.toLower()).concat('/').concat(aClass.name.toLower()).concat('-edit.component.css'), false, 'UTF-8')]
.required{
  color: #FF0000;
}

.horizontalScroll{
  width: 100px; 
  overflow-x: scroll ;
}
[/file]

[file ('app/admin/'.concat(aClass.name.toLower()).concat('/manage').concat(aClass.name.toLower()).concat('/').concat(aClass.name.toLower()).concat('-manage.component.css'), false, 'UTF-8')]
.required{
  color: #FF0000;
}

.horizontalScroll{
  width: 100px; 
  overflow-x: scroll ;
}
[/file]
			[/if]
		[/for]
	[/if]
[/for]

[/template]
