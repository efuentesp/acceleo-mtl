[comment encoding = UTF-8 /]
[module Domain('http://www.eclipse.org/uml2/5.0.0/UML')]

[template public generateElementDomain(aModel : Model)]
[comment @main /]

[for (p : Package | aModel.packagedElement->filter(Package))]
				[if p.name.equalsIgnoreCase('com.softtek.acceleo.demo')]	
	 				[for (aClass : Class | p.packagedElement->filter(Class))]
		    [ if (aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='Crud'))]
[file ('main/java/'.concat(aClass._package.name.replaceAll('\\.','/')).concat('/domain/').concat(aClass.name.toUpperFirst()).concat('.java'), false), 'UTF-8')]

package [_package.name/].domain;

import java.io.Serializable;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import java.util.Date;
import javax.persistence.*;
import javax.validation.constraints.NotNull;

@Entity
@Table(name = "[name.toLower()/]")
public class [name.toUpperFirst()/] implements Serializable {

	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "[name.toLower()/]Id")
	private Integer  [name.toLowerFirst()/]Id;


[comment Atributes/]
[for (anAttribute: Property | getAllAttributes())]
	[for (anElement: Property | anAttribute.type.allOwnedElements()->filter(Property) )]	
		[if (anElement.name.equalsIgnoreCase('typeJava'))]
			[if not (anAttribute.name.equalsIgnoreCase('id'))]
	@NotNull
	@Column(name = "[anAttribute.name.toLower()/]") 
	private [anElement.default/] [anAttribute.name.toLowerFirst()/];
			[/if]
		[/if]	
	[/for]
[/for]


[for (attribute)]
	[if (type.name.startsWith('modal'))]
	@NotNull
	@Column(name = "[type.name.replaceAll('modal','').toLower()/]Id") 
	private Integer [type.name.replaceAll('modal','').toLowerFirst()/]Id;
	[/if]
	[if (type.name.startsWith('radio'))]
	@NotNull
	@Column(name = "[type.name.replaceAll('radio','').toLower()/]Id", nullable = false)
	@Enumerated(EnumType.STRING)
	private [type.name.replaceAll('radio','').toUpperFirst()/] [type.name.replaceAll('radio','').toLowerFirst()/]Id;
		[file ('main/java/'.concat(aClass._package.name.replaceAll('\\.','/')).concat('/domain/').concat(type.name.replaceAll('radio','').toUpperFirst()).concat('.java'), false), 'UTF-8')]
			package [aClass._package.name/].domain;
			public enum [type.name.replaceAll('radio','').toUpperFirst()/] {
			[for (anElement: Property | type.allOwnedElements()->filter(Property) ) separator (',')][name.toLower()/][/for]
			}
		[/file]
	[/if]
	[if (type.name.startsWith('notrequired'))]
		[for (anElement: Property | type.allOwnedElements()->filter(Property) )]
			[if (anElement.type.name.equalsIgnoreCase('HText'))]
	@Column(name = "[anElement.name.toLower()/]") 
	private String [name.toLowerFirst()/];
			[/if]
		[/for]
	[/if]
[/for]

	public Integer get[name.toUpperFirst()/]Id() {
		return [name.toLowerFirst()/]Id;
	}

	public void set[name.toUpperFirst()/]Id(Integer [name.toLowerFirst()/]Id) {
		this.[name.toLowerFirst()/]Id = [name.toLowerFirst()/]Id;
	}

[comment Getters & Setters/]
[for (anAttribute: Property | getAllAttributes())]
	[for (anElement: Property | anAttribute.type.allOwnedElements() ->filter(Property) )]
		[if (anElement.name.equalsIgnoreCase('typeJava'))] 
			[if not(anAttribute.name.equalsIgnoreCase('id'))]
	
	public [anElement.default/] get[anAttribute.name.toUpperFirst()/] () {
	    return [anAttribute.name.toLowerFirst()/];  		
    }
	public void set[anAttribute.name.toUpperFirst()/]([anElement.default/] [anAttribute.name.toLowerFirst()/]) {
		this.[anAttribute.name.toLowerFirst()/] = [anAttribute.name.toLowerFirst()/];
	}
			[/if]
		[/if]
	[/for]
[/for]
[for (attribute)]
	[comment Radio/]
	[if (type.name.startsWith('radio'))]
	public [name.replaceAll('radio','').toUpperFirst()/] get[name.replaceAll('radio','').toUpperFirst()/]Id () {
	    return [name.replaceAll('radio','').toLowerFirst()/]Id;  		
    }
	public void set[name.replaceAll('radio','').toUpperFirst()/]Id ([name.replaceAll('radio','').toUpperFirst()/] [name.replaceAll('radio','').toLowerFirst()/]Id) {
		this.[name.replaceAll('radio','').toLowerFirst()/]Id = [name.replaceAll('radio','').toLowerFirst()/]Id;
	}
	[/if]
	[comment Modal/]
	[if (type.name.startsWith('modal'))]
	public Integer get[name.replaceAll('modal','').toUpperFirst()/]Id () {
	    return [name.replaceAll('modal','').toLowerFirst()/]Id;  		
    }
	public void set[name.replaceAll('modal','').toUpperFirst()/]Id (Integer [name.replaceAll('modal','').toLowerFirst()/]Id) {
		this.[name.replaceAll('modal','').toLowerFirst()/]Id = [name.replaceAll('modal','').toLowerFirst()/]Id;
	}
	[/if]
	[if (type.name.startsWith('notrequired'))]
		[for (anElement: Property | type.allOwnedElements()->filter(Property) )]
			[if (anElement.type.name.equalsIgnoreCase('HText'))]
	public String get[name.toUpperFirst()/] () {
	    return [name.toLowerFirst()/];  		
    }
	public void set[name.toUpperFirst()/] (String [name.toLowerFirst()/]) {
		this.[name.toLowerFirst()/] = [name.toLowerFirst()/];
	}
			[/if]
		[/for]
	[/if]
[/for]
}			
[/file]

			[/if]
		[/for]
	[/if]	
[/for]


[/template]
