[module Controller('http://www.eclipse.org/uml2/5.0.0/UML')]

[template public generateElementController(aModel : Model)]
[comment @main /]

[comment ******* Controller *********/]
[for (p : Package | aModel.packagedElement->filter(Package))]
	[if p.name.equalsIgnoreCase('com.softtek.acceleo.demo')]	
		[for (aClass : Class | p.packagedElement->filter(Class))]
		    [ if (aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='Crud') 
			   or aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='EnumSelect') )]
				[file ('main/java/'.concat(aClass._package.name.replaceAll('\\.','/')).concat('/catalogo/').concat('/controller/').concat(aClass.name.toUpperFirst()).concat('Controller.java'), false), 'UTF-8') ]
/**
 * Autor: PSG.
 * Proyecto:
 * Version: 0.1 
 * Clase para invocar servicios de los [name.toUpperFirst()/]s. 
 */
package [_package.name/].catalogo.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.util.UriComponentsBuilder;
import org.springframework.security.access.prepost.PreAuthorize;

import org.springframework.web.bind.annotation.RestController;
import com.softtek.acceleo.demo.exception.GenericException;

import [_package.name/].catalogo.bean.[name.toUpperFirst()/]Bean;
import [_package.name/].domain.[name.toUpperFirst()/];
import [_package.name/].service.[name.toUpperFirst()/]Service;

/**
 * Clase [name.toUpperFirst()/]Controller.
 * @author PSG.
 *
 */
@RestController
public class [name.toUpperFirst()/]Controller {

	@Autowired
	private [name.toUpperFirst()/]Service [name.toLower()/]Service;
	
	[name.toUpperFirst()/] [name.toLower()/] = new [name.toUpperFirst()/]();

	/************************************** SEARCH
	 * Obtiene informacion de los [name.toLower()/]s.
	 * @param requestParams.
	 * @param request.
	 * @param response.
	 * @return List<[name.toUpperFirst()/]>.
	 */
	@RequestMapping(value = "/[name.toLower()/]", method = RequestMethod.GET, produces = "application/json")
	@PreAuthorize("hasRole('[name.toUpper()/]SEARCH')")
	public @ResponseBody  List<[name.toUpperFirst()/]> get[name.toUpperFirst()/]s(@RequestParam Map<String,String> requestParams, HttpServletRequest request, HttpServletResponse response) {

       	String query=requestParams.get("q");
		int _page= requestParams.get("_page")==null?0:new Integer(requestParams.get("_page")).intValue();
		long rows = 0;

		List<[name.toUpperFirst()/]> list[name.toUpperFirst()/] = null;

		if (query==null && _page == 0) {
       		list[name.toUpperFirst()/] = [name.toLower()/]Service.list[name.toUpperFirst()/]s([name.toLower()/]);
			rows = [aClass.name.toLower()/]Service.getTotalRows();
		} else if (query!= null){
			list[name.toUpperFirst()/] = [name.toLower()/]Service.list[name.toUpperFirst()/]sQuery([name.toLower()/], query, _page, 10);
			rows = [name.toLower()/]Service.getTotalRowsSearch(query);
		} else if (_page != 0){
			list[name.toUpperFirst()/] = [name.toLower()/]Service.list[name.toUpperFirst()/]sPagination([name.toLower()/], _page, 10);
			rows = [name.toLower()/]Service.getTotalRows();
		}

		response.setHeader("Access-Control-Expose-Headers", "x-total-count");
		response.setHeader("x-total-count", String.valueOf(rows).toString());	

		return list[name.toUpperFirst()/];
	}

	/************************************* SEARCH
	 * Obtiene informacion de un [name.toLower()/].
	 * @param id.
	 * @return [name.toUpperFirst()/].
	 */
	@RequestMapping(value = "/id[name.toLower()/]/{id}", method = RequestMethod.GET, produces = "application/json")
	@PreAuthorize("hasRole('[name.toUpper()/]SEARCH')")
	    public @ResponseBody  [name.toUpperFirst()/] get[name.toUpperFirst()/](@PathVariable("id") int id) {	        
	        [name.toUpperFirst()/] [name.toLower()/] = null;
	        
	        [name.toLower()/] = [name.toLower()/]Service.get[name.toUpperFirst()/](id);
			return [name.toLower()/];
	 }

	/*************************** CREATE
	 * Crea un nuevo [name.toLower()/].
	 * @param [name.toLower()/].
	 * @param ucBuilder.
	 * @return ResponseEntity.
	 */
	 @RequestMapping(value = "/[name.toLower()/]", method = RequestMethod.POST)
	 @PreAuthorize("hasRole('[name.toUpper()/]CREATE')")
	    public ResponseEntity<Void> create[name.toUpperFirst()/](@RequestBody [name.toUpperFirst()/] [name.toLower()/],    UriComponentsBuilder ucBuilder) {
	   
	        [name.toLower()/]Service.add[name.toUpperFirst()/]([name.toLower()/]);
	 
	        HttpHeaders headers = new HttpHeaders();
	        headers.setLocation(ucBuilder.path("/[name.toLower()/]/{id}").buildAndExpand([name.toLower()/].get[name.toUpperFirst()/]Id()).toUri());
	        return new ResponseEntity<Void>(headers, HttpStatus.CREATED);
	 }
		
	 /****************************************** UPDATE
	  * Actualiza la informacion de un [name.toLower()/].
	  * @param id.
	  * @param [name.toLower()/].
	  * @return ResponseEntity.
	  */
	 @RequestMapping(value = "/[name.toLower()/]/{id}", method = RequestMethod.PUT)
 	 @PreAuthorize("hasRole('[name.toUpper()/]UPDATE')") 
	    public ResponseEntity<[name.toUpperFirst()/]> actualizar[name.toUpperFirst()/](
				@PathVariable("id") int id, 
				@RequestBody [name.toUpperFirst()/] [name.toLower()/]) {
	        
	        [name.toUpperFirst()/] [name.toLower()/]Found = [name.toLower()/]Service.get[name.toUpperFirst()/](id);
	         
	        if ([name.toLower()/]Found==null) {
	            System.out.println("User with id " + id + " not found");
	            return new ResponseEntity<[name.toUpperFirst()/]>(HttpStatus.NOT_FOUND);
	        }
	
[for (anAttribute: Property | getAllAttributes())]
	[for (anElement: Property | anAttribute.type.allOwnedElements() ->filter(Property) )]
		[if (anElement.name.equalsIgnoreCase('typeJava'))] 
			[if not(anAttribute.name.equalsIgnoreCase('id'))]
	[aClass.name.toLower()/]Found.set[anAttribute.name.toUpperFirst()/]([aClass.name.toLower()/].get[anAttribute.name.toUpperFirst()/]());
			[/if]
		[/if]
	[/for]
[/for]
[for (attribute)]
	[comment Radio/]
	[if (type.name.startsWith('radio'))]
[aClass.name.toLower()/]Found.set[name.replaceAll('radio','').toUpperFirst()/]Id([aClass.name.toLower()/].get[name.replaceAll('radio','').toUpperFirst()/]Id());
	[/if]
	[comment Modal/]
	[if (type.name.startsWith('modal'))]
[aClass.name.toLower()/]Found.set[name.replaceAll('modal','').toUpperFirst()/]Id([aClass.name.toLower()/].get[name.replaceAll('modal','').toUpperFirst()/]Id());
	[/if]
[/for]

			
			[aClass.name.toLower()/]Found.set[aClass.name.toUpperFirst()/]Id([aClass.name.toLower()/].get[name.toUpperFirst()/]Id());

		    [name.toLower()/]Service.edit[name.toUpperFirst()/]([name.toLower()/]Found);
	        return new ResponseEntity<[name.toUpperFirst()/]>([name.toLower()/]Found, HttpStatus.OK);
	  } 	
	
		/********************************** DELETE
		 * Elimina un [name.toLower()/].
		 * @param id.
		 * @return ResponseEntity<[name.toUpperFirst()/]>.
		 */
		@RequestMapping(value = "/[name.toLower()/]/{id}", method = RequestMethod.DELETE)
		@PreAuthorize("hasRole('[name.toUpper()/]DELETE')")  
	    public ResponseEntity<[name.toUpperFirst()/]> delete[name.toUpperFirst()/](@PathVariable("id") int id) {
			  
			//try{
	    	 
	         [name.toUpperFirst()/] [name.toLower()/] = [name.toLower()/]Service.get[name.toUpperFirst()/](id);
	         if ([name.toLower()/] == null) {
	             return new ResponseEntity<[name.toUpperFirst()/]>(HttpStatus.NOT_FOUND);
	         }
	  
           
	             [name.toLower()/]Service.delete[name.toUpperFirst()/]([name.toLower()/]);
            	 return new ResponseEntity<[name.toUpperFirst()/]>(HttpStatus.OK);
           	//} catch(GenericException e) {
            //	 return new ResponseEntity<[name.toUpperFirst()/]>(HttpStatus.PRECONDITION_FAILED);
            //}
		}

	/**
	 * Salva informacion de un [name.toLower()/].
	 * @param afiliadoBean.
	 * @return String.
	 */
	@RequestMapping(value = "/save[name.toUpperFirst()/]", method = RequestMethod.POST)
	@PreAuthorize("hasRole('[name.toUpper()/]')")  
	public @ResponseBody String save[name.toUpperFirst()/](
			@ModelAttribute("command") [name.toUpperFirst()/]Bean [name.toLower()/]Bean) {

		[name.toUpperFirst()/] [name.toLower()/] = prepareModel([name.toLower()/]Bean);
		[name.toLower()/]Service.add[name.toUpperFirst()/]([name.toLower()/]);

		return "SUCCESS";
	}
	
	/**
	 * Edita informacion de un [name.toLower()/].
	 * @param [name.toLower()/]Bean.
	 * @return String.
	 */
	@RequestMapping(value = "/edit[name.toUpperFirst()/]", method = RequestMethod.POST)
	@PreAuthorize("hasRole('[name.toUpper()/]')")  
	public @ResponseBody String edit[name.toUpperFirst()/](
			@ModelAttribute("command") [name.toUpperFirst()/]Bean [name.toLower()/]Bean) {


		[name.toUpperFirst()/] [name.toLower()/] = prepareModel([name.toLower()/]Bean);
		[name.toLower()/]Service.edit[name.toUpperFirst()/]([name.toLower()/]);
		return "SUCCESS";
	}

	/**
	 * Agrega un [name.toUpper()/].
	 * @param [name.toUpper()/]Bean.
	 * @param result.
	 * @return ModelAndView.
	 */
	@RequestMapping(value = "/search[name.toUpperFirst()/]", method = RequestMethod.GET)
	@PreAuthorize("hasRole('[name.toUpper()/]')")  
	public ModelAndView add[name.toUpperFirst()/](
			@ModelAttribute("command") [name.toUpperFirst()/]Bean [name.toLower()/]Bean,
			BindingResult result) {

		Map<String, Object> model = new HashMap<String, Object>();
		[name.toUpperFirst()/] [name.toLower()/] = null;
		if ([name.toLower()/]Bean != null)
			[name.toLower()/] = prepareModel([name.toLower()/]Bean);
		model.put("[name.toLower()/]s",
				prepareListofBean([name.toLower()/]Service.list[name.toUpperFirst()/]s([name.toLower()/])));
		return new ModelAndView("search[name.toUpperFirst()/]", model);
	}

	/**
	 * Elimina un [name.toLower()/].
	 * @param [name.toLower()/]Bean.
	 * @param result.
	 * @return ModelAndView.
	 */
	@RequestMapping(value = "/delete[name.toUpperFirst()/]", method = RequestMethod.POST)
	@PreAuthorize("hasRole('[name.toUpper()/]')")  
	public ModelAndView delete[name.toUpperFirst()/](
			@ModelAttribute("command") [name.toUpperFirst()/]Bean [name.toLower()/]Bean,
			BindingResult result) {
		System.out.println("delete " + [name.toLower()/]Bean.get[name.toUpperFirst()/]Id());
		[name.toLower()/]Service.delete[name.toUpperFirst()/](prepareModel([name.toLower()/]Bean));
		Map<String, Object> model = new HashMap<String, Object>();
		model.put("[name.toLower()/]", null);
		model.put("[name.toLower()/]s",
				prepareListofBean([name.toLower()/]Service.list[name.toUpperFirst()/]s(null)));
		return new ModelAndView("search[name.toUpperFirst()/]", model);
	}

	/**
	 * 
	 * @return ModelAndView.
	 */
	@RequestMapping(value = "/entry[name.toUpperFirst()/]", method = RequestMethod.GET)
	@PreAuthorize("hasRole('[name.toUpper()/]')")  
	public ModelAndView entry[name.toUpperFirst()/]() {
		return new ModelAndView("redirect:/search[name.toUpperFirst()/]");
	}

	private [name.toUpperFirst()/] prepareModel([name.toUpperFirst()/]Bean [name.toLower()/]Bean) {
		[name.toUpperFirst()/] [name.toLower()/] = new [name.toUpperFirst()/]();

			[for (attribute)]
				[comment Enum/]
				[if not (type.name = ('HText') or type.name.startsWith('modal'))]
		//[aClass.name.toLower()/].set[type.name.toUpperFirst()/]Id([aClass.name.toLower()/]Bean.get[name.toUpperFirst()/]Id());
				[/if]
				[comment Foering Key/]
				[if (type.name.startsWith('modal'))]
		[aClass.name.toLower()/].set[name.toUpperFirst()/]Id([aClass.name.toLower()/]Bean.get[name.toUpperFirst()/]Id());
				[/if]
			[/for]
		[for (attribute)]
			[if (type.name = ('HText'))]
			[if not (name.equalsIgnoreCase('id'))]
		[aClass.name.toLower()/].set[name.toUpperFirst()/]([aClass.name.toLower()/]Bean.get[name.toUpperFirst()/]());
			[/if]
			[/if]
        [/for]
		[name.toLower()/].set[name.toUpperFirst()/]Id([name.toLower()/]Bean.get[name.toUpperFirst()/]Id());
		[name.toLower()/]Bean.set[name.toUpperFirst()/]Id(null);

		return [name.toLower()/];
	}

	/**
	 * Convierte un objeto de tipo [name.toUpperFirst()/]Bean a un objeto de tipo [name.toUpperFirst()/].
	 * @param [name.toLower()/]Bean.
	 * @return [name.toUpperFirst()/].
	 */
	private List<[name.toUpperFirst()/]Bean> prepareListofBean(List<[name.toUpperFirst()/]> [name.toLower()/]s) {
		List<[name.toUpperFirst()/]Bean> beans = null;
		if ([name.toLower()/]s != null && ![name.toLower()/]s.isEmpty()) {
			beans = new ArrayList<[name.toUpperFirst()/]Bean>();
			[name.toUpperFirst()/]Bean bean = null;
			for ([name.toUpperFirst()/] [name.toLower()/] : [name.toLower()/]s) {
				bean = new [name.toUpperFirst()/]Bean();

				[for (attribute)]
					[comment Enum/]
					[if not (type.name = ('HText') or type.name.startsWith('modal')
		or type.name = ('HCheckbox') 
		or type.name = ('HInteger') 
		or type.name = ('HDate')
		or type.name = ('HTextLong') 
		or type.name = ('HRadio')
		or type.name = ('HBoolean')
		or type.name = ('HDouble')
		or type.name = ('HEmail')
		or type.name = ('HCurrency')
or type.name = ('HImage')
or type.name = ('HFile')
)]
				//bean.set[type.name.toUpperFirst()/]Id([aClass.name.toLower()/].get[name.toUpperFirst()/]Id());
					[/if]
					[comment Foering Key/]
					[if (type.name.startsWith('modal'))]
				bean.set[name.toUpperFirst()/]Id([aClass.name.toLower()/].get[name.toUpperFirst()/]Id());
					[/if]
				[/for]
				[for (attribute)]
					[if (type.name = ('HText'))]
					[if not (name.equalsIgnoreCase('id'))]
				bean.set[name.toUpperFirst()/]([aClass.name.toLower()/].get[name.toUpperFirst()/]());
					[/if]
					[/if]
		        [/for]
				bean.set[name.toUpperFirst()/]Id([name.toLower()/].get[name.toUpperFirst()/]Id());
				beans.add(bean);
			}
		}
		return beans;
	}

}

[if (aClass.getOperations() -> asSequence() -> size()) > 0]
	[comment aClass.generateElementControllerAdapter('sda')/]
[/if]

[/file]

			[/if]        
   		[/for]
	[/if]	
[/for]


[/template]
