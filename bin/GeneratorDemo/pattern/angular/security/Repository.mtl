[comment encoding = UTF-8 /]
[module Repository('http://www.eclipse.org/uml2/5.0.0/UML')]

[template public generateElementRepository(aModel : Model)]
[comment @main /]

[for (p : Package | aModel.packagedElement->filter(Package))]
				[if p.name.equalsIgnoreCase('com.softtek.acceleo.demo.security')]	

[file ('main/java/'.concat(p.name.replaceAll('\\.','/')).concat('/repository/').concat('AdminPermisosRepository.java'), false), 'UTF-8') ]
package com.softtek.acceleo.demo.security.repository;

import java.util.List;

import com.softtek.acceleo.demo.domain.AdminPermiso;
import com.softtek.acceleo.demo.domain.ConfigPermisos;

public interface AdminPermisosRepository {
	List<AdminPermiso> getPermisos();
	List<ConfigPermisos> getConfiguracionPermisos();
}
[/file]

[file ('main/java/'.concat(p.name.replaceAll('\\.','/')).concat('/repository/').concat('AdminPermisosRepositoryImpl.java'), false), 'UTF-8') ]
package com.softtek.acceleo.demo.security.repository;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import com.softtek.acceleo.demo.domain.AdminPermiso;
import com.softtek.acceleo.demo.domain.ConfigAuthority;
import com.softtek.acceleo.demo.domain.ConfigPermisos;

import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


@Repository("adminPermisosRepository")
public class AdminPermisosRepositoryImpl implements AdminPermisosRepository {
	private final Logger logger = LoggerFactory.getLogger(this.getClass());

	@Autowired
	private SessionFactory sessionFactory;
	
	
	@Override
	public List<AdminPermiso> getPermisos() {
		List<AdminPermiso> lstAdminPermisos = new ArrayList();
		
		try {
			Session session = sessionFactory.getCurrentSession();
			Transaction transaction = session.beginTransaction();
			
			SQLQuery query = session.createSQLQuery("select g.ID_GRUPO, g.NAME, p.ID_PRIVILEGE, p.NAME as ROLE, (CASE WHEN ra.ENABLED is null THEN 0 ELSE ra.ENABLED END) as 'ADMIN', (CASE WHEN ru.ENABLED is null THEN 0 ELSE ru.ENABLED END) as 'USER', (CASE WHEN ran.ENABLED is null THEN 0 ELSE ran.ENABLED END) as 'ANONYMOUS', ra.ID_PRIVILEGE as ID_PRIVILEGE_ADMIN, ra.ID_AUTHORITY as ID_AUTHORITY_ADMIN, ru.ID_PRIVILEGE as ID_PRIVILEGE_USER, ru.ID_AUTHORITY as ID_AUTHORITY_USER, ran.ID_PRIVILEGE as ID_PRIVILEGE_ANONYMOUS, ran.ID_AUTHORITY as ID_AUTHORITY_ANONYMOUS\r\n" + 
					"from demoacceleo.grupo g, demoacceleo.privilege p \r\n" + 
					"left outer join (select a.ENABLED, a.ID_PRIVILEGE, a.ID_AUTHORITY\r\n" + 
					"				 from demoacceleo.authority_privilege a, demoacceleo.authority b, demoacceleo.privilege c\r\n" + 
					"				 where a.ID_AUTHORITY = b.ID_AUTHORITY\r\n" + 
					"				 and a.ID_PRIVILEGE = c.ID_PRIVILEGE\r\n" + 
					"				 and b.name = 'ROLE_ADMIN'\r\n" + 
					"				 order by c.NAME desc) ra\r\n" + 
					"ON(p.ID_PRIVILEGE = ra.ID_PRIVILEGE) \r\n" + 
					"left outer join (select a.ENABLED, a.ID_PRIVILEGE, a.ID_AUTHORITY\r\n" + 
					"				 from demoacceleo.authority_privilege a, demoacceleo.authority b, demoacceleo.privilege c\r\n" + 
					"				 where a.ID_AUTHORITY = b.ID_AUTHORITY\r\n" + 
					"				 and a.ID_PRIVILEGE = c.ID_PRIVILEGE\r\n" + 
					"				 and b.name = 'ROLE_USER'\r\n" + 
					"				 order by c.NAME desc) ru\r\n" + 
					"ON(p.ID_PRIVILEGE = ru.ID_PRIVILEGE)                 \r\n" + 
					"left outer join (select a.ENABLED, a.ID_PRIVILEGE, a.ID_AUTHORITY\r\n" + 
					"				 from demoacceleo.authority_privilege a, demoacceleo.authority b, demoacceleo.privilege c\r\n" + 
					"				 where a.ID_AUTHORITY = b.ID_AUTHORITY\r\n" + 
					"				 and a.ID_PRIVILEGE = c.ID_PRIVILEGE\r\n" + 
					"				 and b.name = 'ROLE_ANONYMOUS'\r\n" + 
					"				 order by c.NAME desc) ran\r\n" + 
					"ON (p.ID_PRIVILEGE = ran.ID_PRIVILEGE)                 \r\n" + 
					"where g.ID_GRUPO = p.ID_GRUPO and p.ENABLED = 1");
			
			List<Object['['/][']'/]> lstAdminPerm =  query.list();
			
			for(Object['['/][']'/] row : lstAdminPerm) {
				AdminPermiso adminPermiso = new AdminPermiso();

				/**
				logger.info("IdGrupo: " + row['['/]0[']'/].toString() + "\tNombreGrupo: " + row['['/]1[']'/].toString() + "\tIdPrivilege: " + row['['/]2[']'/].toString() + 
						    "\tNombrePrivilege: " + row['['/]3[']'/].toString() + "\tAdmin: " + row['['/]4[']'/].toString() + "\tUser: " + row['['/]5[']'/].toString() +
						    "\tAnonymous: " + row['['/]6[']'/].toString() + "\tIdAuthorityAdmin: " + (row['['/]7[']'/] == null ? "null" : row['['/]7[']'/].toString()) + "\tIdPrivilegeAdmin: " + (row['['/]8[']'/] == null ? "null" : row['['/]8[']'/].toString()) +
						    "\tIdAuthorityUser: " + (row['['/]9[']'/] == null ? "null" : row['['/]9[']'/].toString()) + "\tIdPrivilegeUser: " + (row['['/]10[']'/] == null ? "null" : row['['/]10[']'/].toString()) + 
						    "\tIdAuthorityAnonymous: " + (row['['/]11[']'/] == null ? "null" : row['['/]11[']'/].toString()) + "\tIdPrivilegeAnonymous: " + (row['['/]12[']'/] == null ? "null" : row['['/]12[']'/].toString()));
				*/
				
				adminPermiso.setIdGrupo(row['['/]0[']'/] == null ? null : Long.parseLong(row['['/]0[']'/].toString()));
				adminPermiso.setNombreGrupo(row['['/]1[']'/]== null ? null : row['['/]1[']'/].toString());
				adminPermiso.setIdPrivilege(row['['/]2[']'/] == null ? null : Long.parseLong(row['['/]2[']'/].toString()));
				adminPermiso.setNombrePrivilege(row['['/]3[']'/] == null ? null : row['['/]3[']'/].toString());
				adminPermiso.setAdmin(row['['/]4[']'/] == null ? Boolean.FALSE : "1".equals(row['['/]4[']'/].toString()) ? Boolean.TRUE : Boolean.FALSE);
				adminPermiso.setUser(row['['/]5[']'/] == null ? Boolean.FALSE : "1".equals(row['['/]5[']'/].toString()) ? Boolean.TRUE : Boolean.FALSE);
				adminPermiso.setAnonymous(row['['/]6[']'/] == null ? Boolean.FALSE : "1".equals(row['['/]6[']'/].toString()) ? Boolean.TRUE : Boolean.FALSE);
				adminPermiso.setIdAuthorityAdmin(row['['/]7[']'/] == null ? null : Long.parseLong(row['['/]7[']'/].toString()));
				adminPermiso.setIdPrivilegeAdmin(row['['/]8[']'/] == null ? null : Long.parseLong(row['['/]8[']'/].toString()));
				adminPermiso.setIdAuthorityUser(row['['/]9[']'/] == null ? null : Long.parseLong(row['['/]9[']'/].toString()));
				adminPermiso.setIdPrivilegeUser(row['['/]10[']'/] == null ? null : Long.parseLong(row['['/]10[']'/].toString()));
				adminPermiso.setIdAuthorityAnonymous(row['['/]11[']'/] == null ? null : Long.parseLong(row['['/]11[']'/].toString()));
				adminPermiso.setIdPrivilegeAnonymous(row['['/]12[']'/] == null ? null : Long.parseLong(row['['/]12[']'/].toString()));
				
				lstAdminPermisos.add(adminPermiso);
			}
			
			logger.info("/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_");							
			for(AdminPermiso adminPermiso : lstAdminPermisos) {
				logger.info("IdGrupo: " + adminPermiso.getIdGrupo() + "\tNombreGrupo: " + adminPermiso.getNombreGrupo() + "\tIdPrivilege: " + adminPermiso.getIdPrivilege() +
						    "\tNombrePrivilege: " + adminPermiso.getNombrePrivilege() + "\tAdmin: " + adminPermiso.isAdmin() + "\tUser: " + adminPermiso.isUser() + 
						    "\tAnonymous: " + adminPermiso.isAnonymous() + "\tIdAuthorityAdmin: " + adminPermiso.getIdAuthorityAdmin() + "\tIdPrivilegeAdmin: " + adminPermiso.getIdPrivilegeAdmin() +
						    "\tIdAuthorityUser: " + adminPermiso.getIdAuthorityUser() + "\tIdPrivilegeUser: " + adminPermiso.getIdPrivilegeUser() + 
						    "\tIdAuthorityAnonymous: " + adminPermiso.getIdAuthorityAnonymous() + "\tIdPrivilegeAnonymous: " + adminPermiso.getIdPrivilegeAnonymous());
			}
			
		}catch(Exception e) {
			logger.error("Erro", e);
		}
		
		return lstAdminPermisos;
	}


	@Override
	public List<ConfigPermisos> getConfiguracionPermisos() {
		List<ConfigPermisos> lstConfiguracionPermisos = new ArrayList<>();
		
		Session session = sessionFactory.getCurrentSession();
		Transaction transaction = session.beginTransaction();
		
		
		SQLQuery query = session.createSQLQuery("select a.ID_AUTHORITY, a.NAME as AUTHORITY_NAME, a.ENABLED\r\n" + 
		"from demoacceleo.authority a\r\n" + 
		"where a.ENABLED = 1\r\n" +
		"order by a.NAME asc\r\n");
		List<Object['['/][']'/]> lstAuthority = query.list();
		session.clear();
		session.flush();
		
		
		query = session.createSQLQuery("select g.ID_GRUPO, g.NAME as GROUP_NAME, p.ID_PRIVILEGE, p.NAME as PRIVILEGE_NAME, p.ENABLED\r\n" + 
				"from demoacceleo.grupo g, demoacceleo.privilege p\r\n" + 
				"where g.ID_GRUPO = p.ID_GRUPO\r\n" + 
				"and p.ENABLED = 1\r\n" + 
				"order by g.ID_GRUPO, p.ID_PRIVILEGE");
		
		List<Object['['/][']'/]> lstGrupoPrivileges = query.list();
		session.clear();
		session.flush();
		
		query = session.createSQLQuery("select distinct ap.ID_AUTHORITY, ap.ID_PRIVILEGE, ap.ENABLED\r\n" + 
				"from demoacceleo.authority_privilege ap\r\n" + 
				"group by ap.ID_AUTHORITY, ap.ID_PRIVILEGE\r\n" + 
				"order by ap.ID_AUTHORITY, ap.ID_PRIVILEGE");
		List<Object['['/][']'/]> lstAuthorityPrivilege = query.list();
		session.clear();
		session.flush();
				
		try {
			for(Object['['/][']'/] rowGrupPriv : lstGrupoPrivileges) {
				ConfigPermisos configPermisos = new ConfigPermisos();
				List<ConfigAuthority> lstConfigAuthority = new ArrayList<>();
				
				for(Object['['/][']'/] rowAuthority : lstAuthority) {
					ConfigAuthority configAuthority = new ConfigAuthority();
					boolean eureka = false;
					
					for(Object['['/][']'/] rowAuthorityPrivilege : lstAuthorityPrivilege ) {
						if( rowGrupPriv['['/]2[']'/].toString().equals(rowAuthorityPrivilege['['/]1[']'/].toString()) && rowAuthority['['/]0[']'/].toString().equals(rowAuthorityPrivilege['['/]0[']'/].toString()) ) {
							configAuthority.setIdPrivilege(Long.parseLong(rowAuthorityPrivilege['['/]1[']'/].toString()));						
							configAuthority.setEnabled(rowAuthorityPrivilege['['/]2[']'/] == null ? Boolean.FALSE : "1".equals(rowAuthorityPrivilege['['/]2[']'/].toString()) ? Boolean.TRUE : Boolean.FALSE);
							eureka = true;
							break;
						}
					}
					
					if( !eureka ) {
						configAuthority.setIdPrivilege(null);
						configAuthority.setEnabled(Boolean.FALSE);
					}				
	
					configAuthority.setIdAuthority(Long.parseLong(rowAuthority['['/]0[']'/].toString()));				
					configAuthority.setNameAuthority((String) rowAuthority['['/]1[']'/]);
					
					lstConfigAuthority.add(configAuthority);
				}
				
				configPermisos.setIdGrupo(rowGrupPriv['['/]0[']'/] == null ? null : Long.parseLong(rowGrupPriv['['/]0[']'/].toString()));
				configPermisos.setNombreGrupo((String) rowGrupPriv['['/]1[']'/]);
				configPermisos.setIdPrivilege(rowGrupPriv['['/]2[']'/] == null ? null : Long.parseLong(rowGrupPriv['['/]2[']'/].toString()));
				configPermisos.setNombrePrivilege((String) rowGrupPriv['['/]3[']'/]);
				configPermisos.setLstConfigAuthority(lstConfigAuthority);
				
				lstConfiguracionPermisos.add(configPermisos);
			}
		}catch(Exception e) {
			logger.error("Error: ", e);
		}
		
		
		return lstConfiguracionPermisos;
	}

}
[/file]

[file ('main/java/'.concat(p.name.replaceAll('\\.','/')).concat('/repository/').concat('AuthorityPrivilegeRepository.java'), false), 'UTF-8') ]
package com.softtek.acceleo.demo.security.repository;

import java.util.List;

import com.softtek.acceleo.demo.domain.Authority;
import com.softtek.acceleo.demo.domain.AuthorityPrivilege;

public interface AuthorityPrivilegeRepository {

	AuthorityPrivilege getAuthorityPrivilege(AuthorityPrivilege authorityPrivilege);
		
	List<AuthorityPrivilege> getAuthorityPrivilege();
	
	List<AuthorityPrivilege> getAuthorityPrivilegePorIdAuthority(Authority authority);
	
	void updateAuthorityPrivilege(AuthorityPrivilege authorityPrivilege);
	
	void insertAuthorityPrivilege(AuthorityPrivilege authorityPrivilege);
	
	void deleteAuthority(AuthorityPrivilege authorityPrivilege);
	
	void deleteAuthorities(Authority authority);
	
}
[/file]

[file ('main/java/'.concat(p.name.replaceAll('\\.','/')).concat('/repository/').concat('AuthorityPrivilegeRepositoryImpl.java'), false), 'UTF-8') ]
package com.softtek.acceleo.demo.security.repository;

import java.util.List;

import org.apache.log4j.Logger;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.test.annotation.Rollback;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.softtek.acceleo.demo.domain.Authority;
import com.softtek.acceleo.demo.domain.AuthorityPrivilege;


@Repository("authorityPrivilegeRepository")
@Rollback(false)
@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
public class AuthorityPrivilegeRepositoryImpl implements AuthorityPrivilegeRepository{
	private static final Logger logger = Logger.getLogger(AuthorityPrivilegeRepositoryImpl.class);
	
	@Autowired
	private SessionFactory sessionFactory;

	@Override
	@Transactional(propagation = Propagation.REQUIRED, readOnly = true)
	public List<AuthorityPrivilege> getAuthorityPrivilege() {
		List<AuthorityPrivilege> lstAuthorityPrivilege = null;
		
		try {
			Session session = sessionFactory.getCurrentSession();
			Criteria criteria = session.createCriteria(AuthorityPrivilege.class);
			lstAuthorityPrivilege = (List<AuthorityPrivilege>) criteria.list();
		}catch(Exception e) {
			logger.error("Error: ", e);
		}
		
		return lstAuthorityPrivilege;
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
	public void updateAuthorityPrivilege(AuthorityPrivilege authorityPrivilege) {
		try {
			Session session = sessionFactory.getCurrentSession();
			session.flush();
			session.update(authorityPrivilege);
		}catch(HibernateException e) {
			logger.info("Error ---->> ", e);
		}catch(Exception e) {
			logger.info("Error ---->> ", e);
		}
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
	public void insertAuthorityPrivilege(AuthorityPrivilege authorityPrivilege) {
		try {
			Session session = sessionFactory.getCurrentSession();
			session.flush();
			session.persist(authorityPrivilege);
		}catch(Exception e) {
			logger.error("Error ---->> ", e);
		}
	}

	@Override
	public AuthorityPrivilege getAuthorityPrivilege(AuthorityPrivilege authorityPrivilege) {
		AuthorityPrivilege autPriv = null;
		
		try {
			Session session = sessionFactory.getCurrentSession();
			Criteria criteria = session.createCriteria(AuthorityPrivilege.class);
			criteria.add(Restrictions.and(Restrictions.eq("idAuthority", authorityPrivilege.getIdAuthority()) , 
					                      Restrictions.eq("idPrivilege", authorityPrivilege.getIdPrivilege())));
			
			List<AuthorityPrivilege> lstAuthorityPrivilege = (List<AuthorityPrivilege>) criteria.list();
			
			if( lstAuthorityPrivilege != null && !lstAuthorityPrivilege.isEmpty() ) {
				autPriv = lstAuthorityPrivilege.get(0); 
			}
		}catch(Exception e) {
			logger.error("Error: ", e);
		}
		
		return autPriv;
	}
	
	@Override
	public void deleteAuthority(AuthorityPrivilege authorityPrivilege) {
		sessionFactory.getCurrentSession().delete(authorityPrivilege);
	}
	
	@Override
	public void deleteAuthorities(Authority authority) {
		Session session = sessionFactory.getCurrentSession();
		String hql = "delete from AuthorityPrivilege where idAuthority.idAuthority = :idAuthority";
		Query query = null;
		
	    query = session.createQuery(hql);
	    query.setLong("idAuthority", authority.getAuthorityId());
	    query.executeUpdate(); 			
	}

	@Override
	public List<AuthorityPrivilege> getAuthorityPrivilegePorIdAuthority(Authority authority) {
		List<AuthorityPrivilege> lstAuthorityPrivilege = null;
		
		try {
			Session session = sessionFactory.getCurrentSession();
			Criteria criteria = session.createCriteria(AuthorityPrivilege.class);
			criteria.add(Restrictions.eq("idAuthority.idAuthority", authority.getAuthorityId()));
			
			lstAuthorityPrivilege = (List<AuthorityPrivilege>) criteria.list();			
		}catch(Exception e) {
			logger.error("Error: ", e);
		}
		
		return lstAuthorityPrivilege;
	}
}
[/file]

[file ('main/java/'.concat(p.name.replaceAll('\\.','/')).concat('/repository/').concat('AuthorityRepository.java'), false), 'UTF-8') ]
package com.softtek.acceleo.demo.security.repository;

import java.util.List;

import com.softtek.acceleo.demo.domain.Authority;

public interface AuthorityRepository {

	 public Authority getAuthority(long authoritoryId);
	 
	 
	 public List<Authority> getAuthority();
	 
	 public void addAuthority(Authority authority);   
	 
	 public void editAuthority(Authority authority);
	   
	 public List<Authority> listAuthorityss(Authority authority);   
	    
	 public Authority getAuthority(int empid);   
	    
	 public void deleteAuthority(Authority authority); 

	 public List<Authority> listAuthorityssQuery(Authority authority, String query, int page, int size);

	 public List<Authority> listAuthoritysPagination(Authority authority, int page, int size);	

     public long getTotalRows();

     public long getTotalRows(String query);

     public long getTotalRowsSearch(String query);
}

[/file]

[file ('main/java/'.concat(p.name.replaceAll('\\.','/')).concat('/repository/').concat('AuthorityRepositoryImpl.java'), false), 'UTF-8') ]
package com.softtek.acceleo.demo.security.repository;

import java.util.List;

import org.apache.log4j.Logger;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Example;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.softtek.acceleo.demo.domain.Authority;
import com.softtek.acceleo.demo.domain.User;

@Repository("authorityRepository")
public class AuthorityRepositoryImpl implements AuthorityRepository{
	private static final Logger logger = Logger.getLogger(AuthorityRepositoryImpl.class);
	
	@Autowired
	private SessionFactory sessionFactory;
	
	@Override
	public Authority getAuthority(long authoritoryId) {
		Authority authority = null;
		
		try {
			Session session = sessionFactory.getCurrentSession();
			
			authority = (Authority) session.get(Authority.class, authoritoryId);
		}catch(Exception e) {
			logger.error("---->> Error: ", e);
		}
		
		return authority;
	}

	@Override
	public List<Authority> getAuthority() {
		List<Authority> lstAuthority = null;

		try {
			Session session = sessionFactory.getCurrentSession();
			Criteria criteria = session.createCriteria(Authority.class);
			criteria.add(Restrictions.eq("enabled", Boolean.TRUE)).addOrder(Order.asc("name")).list();
			
			lstAuthority = (List<Authority>) criteria.list();
		}catch(Exception e) {
			logger.error("Error: ", e);
		}
		
		return lstAuthority;
	}
	
	@SuppressWarnings({ "unchecked" })
	public List<Authority> listAuthorityss(Authority authority) {

		if (authority != null) {

			Authority authorityProxy = new Authority();







			return (List<Authority>) sessionFactory.getCurrentSession()
					.createCriteria(Authority.class)
					.add(Example.create(authorityProxy)).list();

		}

		return (List<Authority>) sessionFactory.getCurrentSession()
				.createCriteria(Authority.class).list();

	}


	@SuppressWarnings("unchecked")
	public List<Authority> listAuthorityssQuery(Authority authority, String query, int page, int size) {
			//authorityProxy.set#columnsGrid(authority.get#columnsGrid());
			return (List<Authority>) sessionFactory.getCurrentSession()
					.createCriteria(Authority.class).setFirstResult((page - 1) * size)
					.add(	
							Restrictions.or(Restrictions.or(Restrictions.or(Restrictions.or(	
						Restrictions.like("fechamodificacion", "%" + query +"%"),Restrictions.like("fechacreacion", "%" + query +"%")),Restrictions.like("estatus", "%" + query +"%")),Restrictions.like("idrol", "%" + query +"%")),Restrictions.like("rol", "%" + query +"%"))	
	
	
	
	
).list();
	}


	@SuppressWarnings("unchecked")
	public List<Authority> listAuthoritysPagination(Authority authority, int page, int size) {
			//cuentaProxy.set#columnsGrid(cuenta.get#columnsGrid());
			return (List<Authority>) sessionFactory.getCurrentSession()
				.createCriteria(Authority.class).setFirstResult((page - 1) * size)
				
				.setMaxResults(size).list();
	}

	@SuppressWarnings({ "unchecked" })
	public long getTotalRows() {
		
		long totalRows = 0;
		totalRows = (Long) sessionFactory.getCurrentSession()
		.createCriteria(Authority.class).setProjection(Projections.rowCount())
		.uniqueResult();	
		return totalRows;  
	}

	@SuppressWarnings({ "unchecked" })
	public long getTotalRowsSearch(String query) {
		
		long totalRows = 0;
		totalRows = (Long) sessionFactory.getCurrentSession()
		.createCriteria(Authority.class).setProjection(Projections.rowCount())
					.add(	
							Restrictions.or(Restrictions.or(Restrictions.or(Restrictions.or(	
						Restrictions.like("fechamodificacion", "%" + query +"%"),Restrictions.like("fechacreacion", "%" + query +"%")),Restrictions.like("estatus", "%" + query +"%")),Restrictions.like("idrol", "%" + query +"%")),Restrictions.like("rol", "%" + query +"%"))	
	
	
	
	
).uniqueResult();
		return totalRows;  
	}


	@SuppressWarnings({ "unchecked" })
	public long getTotalRows(String query) {
		
		long totalRows = 0;
		totalRows = (Long) sessionFactory.getCurrentSession()
		.createCriteria(Authority.class).setProjection(Projections.rowCount())
		
		.uniqueResult();
		return totalRows;  
	}

	

	public Authority getAuthority(int empid) {
		return (Authority) sessionFactory.getCurrentSession().get(
				Authority.class, empid);
	}

	public void deleteAuthority(Authority authority) {
		sessionFactory.getCurrentSession().delete(authority);
	}

	@Override
	public void addAuthority(Authority authority) {
		sessionFactory.getCurrentSession().persist(authority);
		
	}

	@Override
	public void editAuthority(Authority authority) {
		sessionFactory.getCurrentSession().update(authority);
		
	}

}
[/file]

[file ('main/java/'.concat(p.name.replaceAll('\\.','/')).concat('/repository/').concat('GroupRepository.java'), false), 'UTF-8') ]
package com.softtek.acceleo.demo.security.repository;

import com.softtek.acceleo.demo.domain.Grupo;

public interface GroupRepository {

	 public Grupo getGroup(int groupId);   
	
}
[/file]

[file ('main/java/'.concat(p.name.replaceAll('\\.','/')).concat('/repository/').concat('GroupRepositoryImpl.java'), false), 'UTF-8') ]
package com.softtek.acceleo.demo.security.repository;

import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.softtek.acceleo.demo.domain.Grupo;

public class GroupRepositoryImpl implements GroupRepository{

	@Autowired
	private SessionFactory sessionFactory;
	
	@Override
	public Grupo getGroup(int groupId) {
		return (Grupo) sessionFactory.getCurrentSession().get(Grupo.class, groupId);
	}

}
[/file]

[file ('main/java/'.concat(p.name.replaceAll('\\.','/')).concat('/repository/').concat('PrivilegeRepository.java'), false), 'UTF-8') ]
package com.softtek.acceleo.demo.security.repository;

import java.util.List;

import com.softtek.acceleo.demo.domain.Privilege;

public interface PrivilegeRepository {
	Privilege getPrivilege(long idPrivilege);
	
	List<Privilege> getPrivilege();
}
[/file]

[file ('main/java/'.concat(p.name.replaceAll('\\.','/')).concat('/repository/').concat('PrivilegeRepositoryImpl.java'), false), 'UTF-8') ]
package com.softtek.acceleo.demo.security.repository;

import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.softtek.acceleo.demo.domain.Authority;
import com.softtek.acceleo.demo.domain.Privilege;

@Repository("privilegeRepository")
public class PrivilegeRepositoryImpl implements PrivilegeRepository{
	private final Logger logger = LoggerFactory.getLogger(this.getClass());

	@Autowired
	private SessionFactory sessionFactory;

	@Override
	public List<Privilege> getPrivilege() {
		List<Privilege> lstPrivilege = null;
		
		Session session = sessionFactory.getCurrentSession();
		Criteria criteria = session.createCriteria(Privilege.class);
		lstPrivilege = (List<Privilege>) criteria.list();
		
		return lstPrivilege;
	}

	@Override
	public Privilege getPrivilege(long idPrivilege) {
		Privilege privilege = null;
		
		try {
			Session session = sessionFactory.getCurrentSession();
			privilege = (Privilege) session.get(Privilege.class, idPrivilege);
		}catch(Exception e) {
			logger.error("---->> Error: ", e);
		}
		
		return privilege;
	}
}
[/file]

[file ('main/java/'.concat(p.name.replaceAll('\\.','/')).concat('/repository/').concat('UserAuthorityRepository.java'), false), 'UTF-8') ]
package com.softtek.acceleo.demo.security.repository;

import java.util.List;

import com.softtek.acceleo.demo.domain.Authority;
import com.softtek.acceleo.demo.domain.User;
import com.softtek.acceleo.demo.domain.UserAuthority;

public interface UserAuthorityRepository {
	List<UserAuthority> findByUsername(User user);
	List<UserAuthority> findUserAuthorityByIdAuthority(Authority authority);
}
[/file]

[file ('main/java/'.concat(p.name.replaceAll('\\.','/')).concat('/repository/').concat('UserAuthorityRepositoryImpl.java'), false), 'UTF-8') ]
package com.softtek.acceleo.demo.security.repository;

import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Restrictions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.softtek.acceleo.demo.domain.Authority;
import com.softtek.acceleo.demo.domain.User;
import com.softtek.acceleo.demo.domain.UserAuthority;

@Repository("userAuthorityRepository")
@Transactional
public class UserAuthorityRepositoryImpl implements UserAuthorityRepository{
	private final Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@Autowired
	private SessionFactory sessionFactory;

	
	@Override
	public List<UserAuthority> findByUsername(User user) {
		Session session = sessionFactory.getCurrentSession();
		Criteria criteria = session.createCriteria(UserAuthority.class);
        //criteria.add(Restrictions.eq("idUser", user)).list();
		List<UserAuthority> userAuthority = (List<UserAuthority>) criteria.list();
		
		return userAuthority;
	}


	@Override
	public List<UserAuthority> findUserAuthorityByIdAuthority(Authority authority) {
		Session session = sessionFactory.getCurrentSession();
		Criteria criteria = session.createCriteria(UserAuthority.class);
        criteria.add(Restrictions.eq("idAuthority.idAuthority", authority.getAuthorityId())).list();
		List<UserAuthority> userAuthority = (List<UserAuthority>) criteria.list();
		
		return userAuthority;
	}

	
}
[/file]

[file ('main/java/'.concat(p.name.replaceAll('\\.','/')).concat('/repository/').concat('UserRepository.java'), false), 'UTF-8') ]
package com.softtek.acceleo.demo.security.repository;

import java.util.List;

import org.hibernate.HibernateException;

import com.softtek.acceleo.demo.domain.User;

public interface UserRepository  {
    User findByUsername(String username);
    
    public void addUser(User user) throws HibernateException;   
	 
	 public void editUser(User user);
	   
	 public List<User> listUserss();   
	    
	 public User getUser(Long empid);   
	    
	 public void deleteUser(User user); 

	 public List<User> listUserssQuery(User user, String query, int page, int size);

	 public List<User> listUsersPagination(User user, int page, int size);	

    public long getTotalRows();

    public long getTotalRows(String query);

    public long getTotalRowsSearch(String query);

	

	public List<User> consultarInformacionPorUsuario(User user);
	
	public List<User> consultarInformacionPorUsuario(String userName);
	
	public List<User> consultarInformacionPorUsuario2(User user);
	
}
[/file]

[file ('main/java/'.concat(p.name.replaceAll('\\.','/')).concat('/repository/').concat('UserRepositoryImpl.java'), false), 'UTF-8') ]
package com.softtek.acceleo.demo.security.repository;

import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Example;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.softtek.acceleo.demo.domain.Authority;
import com.softtek.acceleo.demo.domain.Privilege;
import com.softtek.acceleo.demo.domain.User;

@Repository("userRepository")
@Transactional
public class UserRepositoryImpl implements UserRepository {
	private final Logger logger = LoggerFactory.getLogger(this.getClass());

	@Autowired
	private SessionFactory sessionFactory;

	@Override
	public User findByUsername(String username) {
		logger.info("findByUsername() :" + username);
		User user = null;

		try {
			Session session = sessionFactory.getCurrentSession();
			Criteria criteria = session.createCriteria(User.class);
			criteria.add(Restrictions.eq("userName", username)).list();
			List<User> users = (List<User>) criteria.list();

			user = users.get(0);

			List<Authority> lstAuthority = user.getAuthorities();
			for (Authority authority : lstAuthority) {
				logger.info("IdAuthority: " + authority.getAuthorityId() + "\tName: " + authority.getName()
						+ "\tPrivilege" + authority.getPrivilege());
				for (Privilege privilege : authority.getPrivilege())

					logger.info("  --> IdPrivilege: " + privilege.getPrivilegeId() + "\tName: " + privilege.getName());

			}

			java.util.Date da = new Date();
			Calendar cal = Calendar.getInstance();
			cal.setTime(da);
			cal.add(Calendar.MONTH, -1);
			da = cal.getTime();
			user.setLastPasswordResetDate(da);
		} catch (HibernateException e) {
			logger.error("Error - HibernateException: ", e);
			logger.info("Error - HibernateException: ", e);
			System.out.println("Error - HibernateException: " + e);
		} catch(IndexOutOfBoundsException e) {
			logger.error("Error - IndexOutOfBoundsException: ", e);
		} catch (RuntimeException e) {
			logger.error("Error - RuntimeException: ", e);
		} catch (Exception e) {
			logger.error("Error - Exception: ", e);
		}

		return user;
	}

	/*
	 * @Override public User findByUsername(String username) {
	 * 
	 * logger.info("findByUsername() :"+username);
	 * 
	 * User user=null; if (username.equals("admin")) { user = new User();
	 * user.setId((long) 1); user.setUsername(username); user.setPassword(
	 * "$2a$08$lDnHPz7eUkSi6ao14Twuau08mzhWrL4kyZGGU5xfiGALO/Vxd5DOi");
	 * user.setFirstname("admin"); user.setLastname("admin");
	 * user.setEmail("admin@admin.com"); user.setEnabled(true);
	 * 
	 * java.util.Date da = new Date(); Calendar cal = Calendar.getInstance();
	 * cal.setTime(da); cal.add(Calendar.MONTH, -1); da = cal.getTime();
	 * user.setLastPasswordResetDate(da);
	 * 
	 * Authority aut1 =new Authority();
	 * 
	 * aut1.setId((long) 1); aut1.setName(AuthorityName.ROLE_USER); Authority aut2
	 * =new Authority();
	 * 
	 * aut2.setId((long) 2); aut2.setName(AuthorityName.ROLE_ADMIN);
	 * 
	 * List<Authority> listAuthority = new ArrayList<Authority>();
	 * 
	 * listAuthority.add(aut1); listAuthority.add(aut2);
	 * 
	 * user.setAuthorities(listAuthority);
	 * 
	 * } if (username.equals("user")) { user = new User(); user.setId((long) 2);
	 * user.setUsername(username); user.setPassword(
	 * "$2a$08$UkVvwpULis18S19S5pZFn.YHPZt3oaqHZnDwqbCW9pft6uFtkXKDC");
	 * user.setFirstname("user"); user.setLastname("user");
	 * user.setEmail("user@user.com"); user.setEnabled(true);
	 * 
	 * java.util.Date da = new Date(); Calendar cal = Calendar.getInstance();
	 * cal.setTime(da); cal.add(Calendar.MONTH, -1); da = cal.getTime();
	 * user.setLastPasswordResetDate(da);
	 * 
	 * Authority aut1 =new Authority();
	 * 
	 * List<Authority> listAuthority = new ArrayList<Authority>();
	 * 
	 * aut1.setId((long) 1); aut1.setName(AuthorityName.ROLE_USER);
	 * listAuthority.add(aut1); aut1 =new Authority();
	 * 
	 * aut1.setId((long) 3); aut1.setName(AuthorityName.ROLE_AFILIADOCREATE);
	 * listAuthority.add(aut1); aut1 =new Authority();
	 * 
	 * aut1.setId((long) 4); aut1.setName(AuthorityName.ROLE_AFILIADODELETE);
	 * listAuthority.add(aut1); aut1 =new Authority();
	 * 
	 * aut1.setId((long) 5); aut1.setName(AuthorityName.ROLE_AFILIADOSEARCH);
	 * listAuthority.add(aut1); aut1 =new Authority();
	 * 
	 * aut1.setId((long) 5); aut1.setName(AuthorityName.ROLE_AFILIADOUPDATE);
	 * listAuthority.add(aut1); aut1 =new Authority();
	 * 
	 * user.setAuthorities(listAuthority);
	 * 
	 * } if (username.equals("disabled")) { user = new User(); user.setId((long) 3);
	 * user.setUsername(username); user.setPassword(
	 * "$2a$08$UkVvwpULis18S19S5pZFn.YHPZt3oaqHZnDwqbCW9pft6uFtkXKDC");
	 * user.setFirstname("user"); user.setLastname("user");
	 * user.setEmail("disabled@user.com"); user.setEnabled(false);
	 * 
	 * java.util.Date da = new Date(); Calendar cal = Calendar.getInstance();
	 * cal.setTime(da); cal.add(Calendar.MONTH, -1); da = cal.getTime();
	 * user.setLastPasswordResetDate(da);
	 * 
	 * Authority aut1 =new Authority();
	 * 
	 * aut1.setId((long) 1); aut1.setName(AuthorityName.ROLE_USER);
	 * 
	 * List<Authority> listAuthority = new ArrayList<Authority>();
	 * 
	 * listAuthority.add(aut1);
	 * 
	 * user.setAuthorities(listAuthority);
	 * 
	 * } return user; }
	 */

	public void addUser(User user) {
		Session session = null;
		
		try {
			session = sessionFactory.getCurrentSession();
			// sessionFactory.getCurrentSession().persist(user);
			session.clear();
			session.flush();
			logger.info("IdUser: " + user.getUserId()+ "\t UserName: " + user.getUsername() + "\t Password: "
					+ user.getPassword());
			session.persist(user);
		} catch (HibernateException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}/*finally {
			if( session != null ) {
				session.clear();
				session.flush();		
			}
		}*/
	}

	public void editUser(User user) {
		try {
			sessionFactory.getCurrentSession().update(user);
		} catch (HibernateException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@SuppressWarnings({ "unchecked" })
	public List<User> listUserss() {

		List<User> lstUser = null;

		try {
			Session session = sessionFactory.getCurrentSession();
			Criteria criteria = session.createCriteria(User.class);
			criteria.addOrder(Order.asc("firstname")).list();
			
			lstUser = (List<User>) criteria.list();
		}catch(Exception e) {
			logger.error("Error: ", e);
		}
		
		return lstUser;
	}

	@SuppressWarnings("unchecked")
	public List<User> listUserssQuery(User user, String query, int page, int size) {
		// userProxy.set#columnsGrid(user.get#columnsGrid());
		return (List<User>) sessionFactory.getCurrentSession().createCriteria(User.class)
				.setFirstResult((page - 1) * size).add(
						Restrictions.or(
								Restrictions.or(
										Restrictions.or(
												Restrictions.or(
														Restrictions.or(Restrictions.like("iduser", "%" + query + "%"),
																Restrictions.like("fechamodificacion",
																		"%" + query + "%")),
														Restrictions.like("password", "%" + query + "%")),
												Restrictions.like("fechacreacion", "%" + query + "%")),
										Restrictions.like("estatus", "%" + query + "%")),
								Restrictions.like("username", "%" + query + "%"))

				).list();
	}

	@SuppressWarnings("unchecked")
	public List<User> listUsersPagination(User user, int page, int size) {
		// cuentaProxy.set#columnsGrid(cuenta.get#columnsGrid());
		return (List<User>) sessionFactory.getCurrentSession().createCriteria(User.class)
				.setFirstResult((page - 1) * size)

				.setMaxResults(size).list();
	}

	@SuppressWarnings({ "unchecked" })
	public long getTotalRows() {

		long totalRows = 0;
		totalRows = (Long) sessionFactory.getCurrentSession().createCriteria(User.class)
				.setProjection(Projections.rowCount()).uniqueResult();
		return totalRows;
	}

	@SuppressWarnings({ "unchecked" })
	public long getTotalRowsSearch(String query) {

		long totalRows = 0;
		totalRows = (Long) sessionFactory.getCurrentSession().createCriteria(User.class)
				.setProjection(Projections.rowCount()).add(
						Restrictions.or(
								Restrictions.or(
										Restrictions.or(
												Restrictions.or(
														Restrictions.or(Restrictions.like("iduser", "%" + query + "%"),
																Restrictions.like("fechamodificacion",
																		"%" + query + "%")),
														Restrictions.like("password", "%" + query + "%")),
												Restrictions.like("fechacreacion", "%" + query + "%")),
										Restrictions.like("estatus", "%" + query + "%")),
								Restrictions.like("username", "%" + query + "%"))

				).uniqueResult();
		return totalRows;
	}

	@SuppressWarnings({ "unchecked" })
	public long getTotalRows(String query) {

		long totalRows = 0;
		totalRows = (Long) sessionFactory.getCurrentSession().createCriteria(User.class)
				.setProjection(Projections.rowCount())

				.uniqueResult();
		return totalRows;
	}

	public User getUser(Long empid) {
		return (User) sessionFactory.getCurrentSession().get(User.class, empid);
	}

	public void deleteUser(User user) {
		sessionFactory.getCurrentSession().delete(user);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<User> consultarInformacionPorUsuario(User user) {
		List<User> lstUser = null;

		try {
			/**/
			Session session = sessionFactory.getCurrentSession();
			Criteria criteria = session.createCriteria(User.class);
			criteria.add(Restrictions.eq("username", user.getUsername())).list();
			lstUser = (List<User>) criteria.list();
			/**/

			// lstUser = (List<User>)
			// sessionFactory.getCurrentSession().createCriteria(User.class).add(Restrictions.eq("userName",
			// user.getUserName())).list();
		} catch (HibernateException e) {
			logger.error("Error al ejecutar la consulta para obtener los User. - " + e);
		} catch (Exception e) {
			logger.error("Error al ejecutar la consulta para obtener los User. - " + e);
		}

		return lstUser;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<User> consultarInformacionPorUsuario2(User user) {
		if (user != null) {
			User userProxy = new User();
			return (List<User>) sessionFactory.getCurrentSession().createCriteria(User.class)
					.add(Example.create(userProxy)).add(Restrictions.eq("username", user.getUsername())).list();
			// .add(Example.create(userProxy)).add(Restrictions.eq("idUser",
			// user.getIdUser())).list();
		}

		return (List<User>) sessionFactory.getCurrentSession().createCriteria(User.class).list();
	}

	/**
	 * Obtiene informacion del usuario.
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<User> consultarInformacionPorUsuario(String userName) {
		List<User> lstUser = null;

		try {
			lstUser = (List<User>) sessionFactory.getCurrentSession().createCriteria(User.class)
					.add(Restrictions.eq("userName", userName)).list();
		} catch (HibernateException e) {
			logger.error("Error al ejecutar la consulta para obtener los User. - " + e);
		} catch (Exception e) {
			logger.error("Error al ejecutar la consulta para obtener los User. - " + e);
		}

		return lstUser;
	}
}
[/file]
			[/if]
		[/for]

[/template]
