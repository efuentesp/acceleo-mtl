[comment encoding = UTF-8 /]
[module PruebaGeneral('http://www.eclipse.org/uml2/5.0.0/UML')]

[template public generateElementPruebaGeneral(aModel : Model)]
[comment @main /]

[comment Componente que realiza la generación de los pasos /]
[for (p : Package | aModel.packagedElement->filter(Package))]
	[for (c : Class | p.packagedElement->filter(Class))]
		
		[file (('src/app/'+c.name).concat('/'+c.name+'.component.ts'), false, 'UTF-8')]
			import { Component, OnInit, Input }             from '@angular/core';
			import { Router }                               from '@angular/router';
			import { FormDataService }                      from '../data/formData.service';
			import swal from 'sweetalert2';
			import {
			[for (pty: Property | c.getAllAttributes())]
				[pty.name /],
			[/for]} from '../data/formData.model';

			export class [c.name/]Component implements OnInit {
		
		    title = '';
		   [for (p : Package | aModel.packagedElement->filter(Package))]
				[for (c : Class | p.packagedElement->filter(Class))]
					[if (c.name='FormData') ]	
						@Input()[c.name.toLowerCase() /]:[c.name/];
					[else]
						[c.name.toLowerCase() /]: [c.name/];
					[/if]
				[/for]
			[/for]
		    workType: string;
		    form: any;
		
		    constructor(private router: Router, private formDataService: FormDataService) {
		    }
		
		    ngOnInit() {
		        this.[c.name.toLowerCase() /]  = this.formDataService.get[c.name /]();
		    }
		
		    save(form: any): boolean {
		        if (!form.valid) {
		            return false;
		        }
		
				[for (pa : Package | aModel.packagedElement->filter(Package))]
					[for (ca : Class | pa.packagedElement->filter(Class))]
						[ if (ca.name <> c.name) ]
							this.[ca.name/] = this.formDataService.get[ca.name/]();
						[/if]
					[/for]
				[/for]
		
				[for (pack : Package | aModel.packagedElement->filter(Package))]
					[for (cla : Class | pack.packagedElement->filter(Class))]
						[ if (cla.name = 'FormData') ]
							[for (pty: Property | cla.getAllAttributes())]
								this.formData.[pty.name /] =
							[/for]
						[/if]
					[/for]
				[/for]

				[for (pa : Package | aModel.packagedElement->filter(Package))]
					[for (ca : Class | pa.packagedElement->filter(Class))]
						[ if (ca.name <> c.name) ]
							this.formDataService.set[ca.name/](this.ca.name.toLowerCase());
						[/if]
					[/for]
				[/for]
		
		        this.saveForm(this.formData);
		
		        return true;
		    }
		
		    goToPrevious(form: any) {
		          this.router.navigate([ '[' /]'/work'[ ']' /]);
		    }
		
		    goToNext(form: any) {
		        if (this.save(form)) {
		            this.router.navigate([ '[' /]'/result'[ ']' /]);
		        }
		    }
		
		    saveForm(data){
		        this.formDataService.saveFormData(data).subscribe(res => {
		        [for (pa : Package | aModel.packagedElement->filter(Package))]
					[for (ca : Class | pa.packagedElement->filter(Class))]
						[ if (ca.name <> c.name) ]
							this.formDataService.set[ca.name/](res);
						[/if]
					[/for]
				[/for]
		         }, error => {
		           swal('Error...', 'Article save unsuccessfully.', 'error');
		         });
		   	}
		}		

		[/file]

	[/for]
[/for]

[/template]
