[comment encoding = UTF-8 /]
[module CrudMngComponentView('http://www.eclipse.org/uml2/5.0.0/UML')]

[template public generateElementCrudComponentMngView(aModel : Model)]
[comment @main /]

[for (p : Package | aModel.packagedElement->filter(Package))]
	[if p.name.equalsIgnoreCase('com.softtek.acceleo.demo')]	
	 	[for (aClass : Class | p.packagedElement->filter(Class))]
			[ if (aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='Crud') or
				  aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='EnumRadio')) ]

[file ('src/app/'.concat(aClass.name.toLowerFirst()).concat('_mgmnt/').concat(aClass.name.toLowerFirst()).concat('_mgmnt.component.ts'), false, 'UTF-8')]
import { Component, OnInit, ViewChild}                     from '@angular/core';
import { Router }                                          from '@angular/router';
import { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';
import swal from 'sweetalert2';

import { [name.toUpperFirst()/]Service }                                  from '../[name.toLowerFirst()/]/[name.toLowerFirst()/].component.service';
import { [name.toUpperFirst()/] }                                         from '../[name.toLowerFirst()/]/[name.toLowerFirst()/].component.model';

[ if (aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='Crud')) ]
import { Search[name.toUpperFirst()/]Pipe }                               from "../pipe/[name.toLower()/].filter.pipe";
[/if]
@Component ({
    selector: 'app-view',
    templateUrl: './[name.toLowerFirst()/]_mgmnt.component.html'
})

export class [name.toUpperFirst()/]MngComponent implements OnInit {

    title = 'Nuevo [name.toUpperFirst()/]';
    [name.toLowerFirst()/]List: [name.toUpperFirst()/];
    [name.toLowerFirst()/]: [name.toUpperFirst()/];
    form: any;

  	public busqueda[name.toUpperFirst()/]='';
	filterInput[name.toUpperFirst()/] = new FormControl();

    constructor(private router: Router, private [name.toLowerFirst()/]Service: [name.toUpperFirst()/]Service) {
	   	   this.filterInput[name.toUpperFirst()/].valueChanges.subscribe(busqueda[name.toUpperFirst()/] => {
	         this.busqueda[name.toUpperFirst()/] = busqueda[name.toUpperFirst()/];
	       });
	}

    ngOnInit() {

        this.load[name.toUpperFirst()/]s();

    }

    load[name.toUpperFirst()/]s() {
      this.[name.toLowerFirst()/]Service.getAll[name.toUpperFirst()/]().subscribe(data => {
        if (data) {
          this.[name.toLowerFirst()/]List = data;
        }
      }, error => {
        swal('Error...', 'An error occurred while calling the [name.toLowerFirst()/]s.', 'error');
      });
    }
    save([name.toLowerFirst()/]){
      this.[name.toLowerFirst()/]Service.save[name.toUpperFirst()/](this.[name.toLowerFirst()/]).subscribe(res => {
        if (res.status == 201){
          swal('Success...', '[name.toUpperFirst()/] save successfully.', 'success');
        }else{
          swal('Error...', '[name.toUpperFirst()/] save unsuccessfully.', 'error');
        }

      } );
    }
	

  add(){
    this.router.navigate(['['/]'/[name.toLower()/]'[']'/]);
  }

  setClickedRow[name.toLower()/](index, [name.toLower()/]){
	this.[name.toLower()/]Service.set[name.toUpperFirst()/]([name.toLower()/]);
    this.router.navigate(['['/]'/[name.toLower()/]'[']'/]);
  }

}

[/file]


			[/if]
		[/for]
	[/if]
[/for]


[/template]
