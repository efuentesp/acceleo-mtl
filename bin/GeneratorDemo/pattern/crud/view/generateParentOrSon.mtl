[comment encoding = UTF-8 /]
[module generateParentOrSon('http://www.eclipse.org/uml2/5.0.0/UML')]
[template public generateElementParentOrSon(aModel : Model, aClass : Class, sString : String) post(trim())]
[comment @main /]
[for (p : Package | aModel.packagedElement->filter(Package))]
	[if p.name.equalsIgnoreCase('com.softtek.acceleo.demo')]
		[if (p.packagedElement -> filter(Association).memberEnd.name -> count(aClass.name) <= 1 )]
			[if (p.packagedElement -> filter(Association).memberEnd -> select( p | p.name.equalsIgnoreCase(aClass.name)).lower.toString().equalsIgnoreCase('1') = Bag{true})]
				[if sString.equalsIgnoreCase('ParentOrSonLowerCase')]parent[/if]
				[if sString.equalsIgnoreCase('ParentActions')]
import { fetch[aClass.name.toUpperFirst()/], create[aClass.name.toUpperFirst()/], fetchParent } from './actions';
[/if]
[if sString.equalsIgnoreCase('ParentActionsManagement')]
import { fetch[aClass.name.toUpperFirst()/]List, fetch[aClass.name.toUpperFirst()/]ListByParent, fetchParent} from './actions';
[/if]
			[/if]
		[/if]
	[/if]
[/for]
[for (p : Package | aModel.packagedElement->filter(Package))]
	[if p.name.equalsIgnoreCase('com.softtek.acceleo.demo')]
		[if (p.packagedElement -> filter(Association).memberEnd.name -> count(aClass.name) > 1 or (p.packagedElement -> filter(Association).memberEnd -> select( p | p.name.equalsIgnoreCase(aClass.name)).upperValue.stringValue().equalsIgnoreCase('*') = Bag{true}))]
			[if sString.equalsIgnoreCase('ParentOrSonLowerCase')][aClass.getAssociations().memberEnd -> select(p |not p.name.equalsIgnoreCase(aClass.name) and (p.upperValue.stringValue().equalsIgnoreCase('1'))).name.toLower()/][/if]
		[/if]
	[/if]
[/for]
[for (p : Package | aModel.packagedElement->filter(Package))]
	[if p.name.equalsIgnoreCase('com.softtek.acceleo.demo')]
		[if (p.packagedElement -> filter(Association).memberEnd.name -> count(aClass.name) <= 1 )]
			[if (p.packagedElement -> filter(Association).memberEnd -> select( p | p.name.equalsIgnoreCase(aClass.name)).lower.toString().equalsIgnoreCase('1') = Bag{true})]
				[if sString.equalsIgnoreCase('ParentOrSonFirstUperCase')]Parent[/if]
				[/if]
			[/if]
		[/if]
[/for]
[for (p : Package | aModel.packagedElement->filter(Package))]
	[if p.name.equalsIgnoreCase('com.softtek.acceleo.demo')]
		[if (p.packagedElement -> filter(Association).memberEnd.name -> count(aClass.name) > 1 or (p.packagedElement -> filter(Association).memberEnd -> select( p | p.name.equalsIgnoreCase(aClass.name)).upperValue.stringValue().equalsIgnoreCase('*') = Bag{true}))]
			[if sString.equalsIgnoreCase('ParentOrSonFirstUperCase')][aClass.getAssociations().memberEnd -> select(p |not p.name.equalsIgnoreCase(aClass.name) and (p.upperValue.stringValue().equalsIgnoreCase('1'))).name.toUpperFirst()/][/if]
			[if sString.equalsIgnoreCase('ParentActions')]
import { fetch[aClass.getAssociations().memberEnd -> select(p |not p.name.equalsIgnoreCase(aClass.name) and (p.upperValue.stringValue().equalsIgnoreCase('1'))).name.toUpperFirst()/] } from '../[aClass.getAssociations().memberEnd -> select(p |not p.name.equalsIgnoreCase(aClass.name) and (p.upperValue.stringValue().equalsIgnoreCase('1'))).name.toUpperFirst()/]/actions';
import { fetch[aClass.name.toUpperFirst()/], create[aClass.name.toUpperFirst()/] } from './actions';
[/if]
[if sString.equalsIgnoreCase('ParentActionsManagement')]
import { fetch[aClass.getAssociations().memberEnd -> select(p |not p.name.equalsIgnoreCase(aClass.name) and (p.upperValue.stringValue().equalsIgnoreCase('1'))).name.toUpperFirst()/] } from '../[aClass.getAssociations().memberEnd -> select(p |not p.name.equalsIgnoreCase(aClass.name) and (p.upperValue.stringValue().equalsIgnoreCase('1'))).name.toUpperFirst()/]/actions';
import { fetch[aClass.name.toUpperFirst()/]List, fetch[aClass.name.toUpperFirst()/]ListBy[aClass.getAssociations().memberEnd -> select(p |not p.name.equalsIgnoreCase(aClass.name) and (p.upperValue.stringValue().equalsIgnoreCase('1'))).name.toUpperFirst()/] } from './actions';
[/if]
[if sString.equalsIgnoreCase('ParentOrSonMapProps')]
[aClass.getAssociations().memberEnd -> select(p |not p.name.equalsIgnoreCase(aClass.name) and (p.upperValue.stringValue().equalsIgnoreCase('1'))).name.toLower()/]: state.[aClass.getAssociations().memberEnd -> select(p |not p.name.equalsIgnoreCase(aClass.name) and (p.upperValue.stringValue().equalsIgnoreCase('1'))).name.toLower()/].item,
[/if]
[if sString.equalsIgnoreCase('ParentOrSonOnFormSubmit')]
const [aClass.getAssociations().memberEnd -> select(p |not p.name.equalsIgnoreCase(aClass.name) and (p.upperValue.stringValue().equalsIgnoreCase('1'))).name.toLower()/]_id = this.props.location.query.[aClass.getAssociations().memberEnd -> select(p |not p.name.equalsIgnoreCase(aClass.name) and (p.upperValue.stringValue().equalsIgnoreCase('1'))).name.toLower()/]_id;
[/if]
		[/if]
	[/if]
[/for]
[for (p : Package | aModel.packagedElement->filter(Package))]
	[if p.name.equalsIgnoreCase('com.softtek.acceleo.demo')]
		[if (p.packagedElement -> filter(Association).memberEnd.name -> count(aClass.name) = 0 )]
		[if sString.equalsIgnoreCase('ParentOrSonFirstUperCase')]Parent[/if]
		[if sString.equalsIgnoreCase('ParentOrSonLowerCase')]parent[/if]
		[if sString.equalsIgnoreCase('ParentActions')]
import { fetch[aClass.name.toUpperFirst()/], create[aClass.name.toUpperFirst()/], fetchParent } from './actions';
[/if]
[if sString.equalsIgnoreCase('ParentActionsManagement')]
import { fetch[aClass.name.toUpperFirst()/]List, fetch[aClass.name.toUpperFirst()/]ListByParent, fetchParent} from './actions';
[/if]
		[/if]
	[/if]
[/for]	
[/template]
