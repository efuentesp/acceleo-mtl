[comment encoding = UTF-8 /]
[module WorkFlowView('http://www.eclipse.org/uml2/5.0.0/UML')]


[template public generateElementWorkFlow(aModel : Model)]
[comment @main /]


[file (('src/app/workflow').concat('/workflow-guard.service.ts'), false, 'UTF-8')]

	import { Injectable } from '@angular/core';
	import {
	    CanActivate, Router,
	    ActivatedRouteSnapshot,
	    RouterStateSnapshot,
	    CanLoad, Route
	} from '@angular/router';
	
	import { WorkflowService } from './workflow.service';
	
	@Injectable()
	export class WorkflowGuard implements CanActivate {
	    constructor(private router: Router, private workflowService: WorkflowService) { }
	
	    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {
	        let path: string = route.routeConfig.path;
	        return this.verifyWorkFlow(path);
	    }
	
	    verifyWorkFlow(path) : boolean {
	
	        let firstPath = this.workflowService.getFirstInvalidStep(path);
	        if (firstPath.length > 0) {
	            let url = `/${firstPath}`;
	            this.router.navigate([ '[' /]url[ ']' /]);
	            return false;
	        };
	
	        return true;
	    }
	}

[/file]

[file (('src/app/workflow').concat('/workflow.model.ts'), false, 'UTF-8')]
	   export const STEPS = {
	   [for (p : Package | aModel.packagedElement->filter(Package))]
			[for (c : Class | p.packagedElement->filter(Class))]
				 [c.name.toLowerCase()/]:'[c.name.toLowerCase()/]',
			[/for]
		[/for]
		}
[/file]

[file (('src/app/workflow').concat('/workflow.service.ts'), false, 'UTF-8')]

	import { Injectable }         from '@angular/core';
	import { STEPS }              from './workflow.model';
	
	@Injectable()
	export class WorkflowService {
	    private workflow = [ '[' /]
			[for (p : Package | aModel.packagedElement->filter(Package))]
				[for (c : Class | p.packagedElement->filter(Class))]
					 { step: STEPS.[c.name.toLowerCase()/], valid:false }
				[/for]
			[/for]
	    [ ']' /];
	
	    validateStep(step: string) {
	        // If the state is found, set the valid field to true
	        var found = false;
	        for (var i = 0; i < this.workflow.length && !found; i++) {
	            if (this.workflow[ '[' /]i[ ']' /].step === step) {
	                found = this.workflow[ '[' /]i[ ']' /].valid = true;
	            }
	        }
	    }
	
	    resetSteps() {
	        this.workflow.forEach(element => {
	            element.valid = false;
	        });
	    }
	
	    getFirstInvalidStep(step: string) : string {
	        var found = false;
	        var valid = true;
	        var redirectToStep = '';
	        for (var i = 0; i < this.workflow.length && !found && valid; i++) {
	            let item = this.workflow[ '[' /]i[ ']' /];
	            if (item.step === step) {
	                found = true;
	                redirectToStep = '';
	            }
	            else {
	                valid = item.valid;
	                redirectToStep = item.step
	            }
	        }
	        return redirectToStep;
	    }
	}

[/file]

[/template]
