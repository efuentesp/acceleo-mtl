[comment encoding = UTF-8 /]
[module CrudMngComponentView('http://www.eclipse.org/uml2/5.0.0/UML')]

[template public generateElementCrudComponentMngView(aModel : Model)]
[comment @main /]

[for (p : Package | aModel.packagedElement->filter(Package))]
	[if p.name.equalsIgnoreCase('com.softtek.acceleo.demo.wizard')]	
	 	[for (aClass : Class | p.packagedElement->filter(Class))]
			[ if (aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='Crud') 
               or aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='EnumRadio')
			   or aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='EnumCheck')
			   or aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='EnumSelect')
			   or aClass.getAppliedStereotypes()->filter(Stereotype)-> exists(s: Stereotype | s.name='Wizard')) ]

[file ('src/app/'.concat(aClass.name.toLowerFirst()).concat('_mgmnt/').concat(aClass.name.toLowerFirst()).concat('_mgmnt.component.ts'), false, 'UTF-8')]
import { Component, OnInit, ViewChild}                     from '@angular/core';
import { Router }                                          from '@angular/router';
import { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';
import swal from 'sweetalert2';

import { [name.toUpperFirst()/]FakeService }                              from '../[name.toLowerFirst()/]/[name.toLowerFirst()/].component.servicefake';
import { [name.toUpperFirst()/]Service }                                  from '../[name.toLowerFirst()/]/[name.toLowerFirst()/].component.service';
import { [name.toUpperFirst()/] }                                         from '../[name.toLowerFirst()/]/[name.toLowerFirst()/].component.model';

[for (p : Property | aClass.attribute)]
	[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumRadio') 
      or p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumCheck')
	  or p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumSelect'))]

import { [p.type.name.toUpperFirst()/]FakeService }                              from '../[p.type.name.toLowerFirst()/]/[p.type.name.toLowerFirst()/].component.servicefake';
import { [p.type.name.toUpperFirst()/]Service }                                  from '../[p.type.name.toLowerFirst()/]/[p.type.name.toLowerFirst()/].component.service';
import { [p.type.name.toUpperFirst()/] }                                         from '../[p.type.name.toLowerFirst()/]/[p.type.name.toLowerFirst()/].component.model';

	[/if]
[/for]

[for (p : Property | aClass.attribute)]
	[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
import { [p.name.toUpperFirst()/]FakeService }                              from '../[p.name.toLowerFirst()/]/[p.name.toLowerFirst()/].component.servicefake';
import { [p.name.toUpperFirst()/]Service }                                  from '../[p.name.toLowerFirst()/]/[p.name.toLowerFirst()/].component.service';
import { [p.name.toUpperFirst()/] }                                         from '../[p.name.toLowerFirst()/]/[p.name.toLowerFirst()/].component.model';
	[/if]
[/for]

[for (p : Property | aClass.attribute)]
	[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Grid'))]
import { Search[aClass.name.toUpperFirst()/]Pipe }                from "../pipe/[aClass.name.toLower()/].filter.pipe";

[file (('src/app/pipe/').concat(aClass.name.toLower()).concat('.filter.pipe.ts'), false, 'UTF-8')]
import { Injectable, Pipe, PipeTransform } from '@angular/core';

@Pipe({
    name: 'filter',
    pure: false
})

@Injectable()
export class Search[aClass.name.toUpperFirst()/]Pipe implements PipeTransform {
      transform(items: any['['/][']'/], busqueda[aClass.name.toLower()/]): any {
        return busqueda[aClass.name.toLower()/] && items ? items.filter(item =>
		[for (p : Property | aClass.attribute)]
			[if not ( (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Grid')) 
                 or   (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Modal'))
				 or   (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumRadio'))
				 or   (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumCheck'))
				 or   (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumSelect')) )]
			 (item.[p.name/].toLocaleLowerCase().indexOf(busqueda[aClass.name.toLower()/]) !== -1) ||     [comment Hay que eliminar la cadena adicional/]
			[/if]
		[/for]
        ): items;
    }
}
[/file]

	[/if]
[/for]

[for (p : Property | aClass.attribute)]
	[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
import { Search[p.name.toUpperFirst()/]Pipe }                from "../pipe/[p.name.toLower()/].filter.pipe";

[file (('src/app/pipe/').concat(p.name.toLower()).concat('.filter.pipe.ts'), false, 'UTF-8')]
import { Injectable, Pipe, PipeTransform } from '@angular/core';

@Pipe({
    name: 'filter',
    pure: false
})

@Injectable()
export class Search[p.name.toUpperFirst()/]Pipe implements PipeTransform {
      transform(items: any['['/][']'/], busqueda[p.name.toLower()/]): any {
        return busqueda[p.name.toLower()/] && items ? items.filter(item =>
		[for (prt : Property | aClass.attribute)]
			[if not ( (prt.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Grid')) 
                 or   (prt.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Modal'))
				 or   (prt.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumRadio'))
				 or   (prt.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumCheck'))
				 or   (prt.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumSelect')) )]
			 (item.[prt.name/].toLocaleLowerCase().indexOf(busqueda[p.name.toLower()/]) !== -1) ||     [comment Hay que eliminar la cadena adicional/]
			[/if]
		[/for]
        ): items;
    }
}
[/file]

	[/if]
[/for]

@Component ({
    selector: 'app-view',
    templateUrl: './[name.toLowerFirst()/]_mgmnt.component.html'
})

export class [name.toUpperFirst()/]MngComponent implements OnInit {

    title = 'Nuevo [name.toUpperFirst()/]';
    [name.toLowerFirst()/]List: [name.toUpperFirst()/];
    [name.toLowerFirst()/]: [name.toUpperFirst()/];
    form: any;

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumRadio') 
		  or p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumCheck')
		  or p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumSelect'))]
			[p.type.name.toLowerFirst()/]List: [p.type.name.toUpperFirst()/];
		    [p.type.name.toLowerFirst()/]: [p.type.name.toUpperFirst()/];
		[/if]
	[/for]

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
			[p.name.toLowerFirst()/]List: [p.name.toUpperFirst()/];
		    [p.name.toLowerFirst()/]: [p.name.toUpperFirst()/];
		[/if]
	[/for]

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Grid'))]
  	public busqueda[aClass.name/]='';
	filterInput[aClass.name/] = new FormControl();
	[/if]
	[/for]

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
	public busqueda[p.name.toUpperFirst()/]='';
	filterInput[p.name.toUpperFirst()/] = new FormControl();
		[/if]
	[/for]

    constructor(private router: Router, private [name.toLowerFirst()/]Service: [name.toUpperFirst()/]Service, private [name.toLowerFirst()/]FakeService: [name.toUpperFirst()/]FakeService
	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumRadio') 
		  or p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumCheck')
		  or p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumSelect'))]
		, private [p.type.name.toLowerFirst()/]FakeService: [p.type.name.toUpperFirst()/]FakeService	
		, private [p.type.name.toLowerFirst()/]Service: [p.type.name.toUpperFirst()/]Service		
		[/if]
	[/for]
	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
		,private [p.name.toLowerFirst()/]FakeService: [p.name.toUpperFirst()/]FakeService
		,private [p.name.toLowerFirst()/]Service: [p.name.toUpperFirst()/]Service
		[/if]
	[/for]) {}

    ngOnInit() {
	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
        //this.[p.name.toLowerFirst()/] = this.[p.name.toLowerFirst()/]FakeService.get[p.name.toUpperFirst()/]();
		// this.[p.name.toLowerFirst()/] = this.[p.name.toLowerFirst()/]Service.get[p.name.toUpperFirst()/]();
        this.load[p.name.toUpperFirst()/]s();
		[/if]
	[/for]
		//this.[name.toLowerFirst()/] = this.[name.toLowerFirst()/]FakeService.get[name.toUpperFirst()/]();
        // this.[name.toLowerFirst()/] = this.[name.toLowerFirst()/]Service.get[name.toUpperFirst()/]();
        this.load[name.toUpperFirst()/]s();

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumRadio') 
          or p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumCheck')
		  or p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumSelect'))]
		//this.[p.type.name.toLowerFirst()/] = this.[p.type.name.toLowerFirst()/]FakeService.get[p.type.name.toUpperFirst()/]();
		// this.[p.type.name.toLowerFirst()/] = this.[p.type.name.toLowerFirst()/]Service.get[p.type.name.toUpperFirst()/]();
        this.load[p.type.name.toUpperFirst()/]s();
		[/if]
	[/for]

    }

    load[name.toUpperFirst()/]s() {
      this.[name.toLowerFirst()/]FakeService.getAll[name.toUpperFirst()/]().subscribe(data => {
        if (data) {
          this.[name.toLowerFirst()/]List = data;
        }
      }, error => {
        swal('Error...', 'An error occurred while calling the [name.toLowerFirst()/]s.', 'error');
      });
    }

	/*
    load[name.toUpperFirst()/]s() {
      this.[name.toLowerFirst()/]Service.getAll[name.toUpperFirst()/]().subscribe(data => {
        if (data) {
          this.[name.toLowerFirst()/]List = data;
        }
      }, error => {
        swal('Error...', 'An error occurred while calling the [name.toLowerFirst()/]s.', 'error');
      });
    }*/

    save([name.toLowerFirst()/], modal){
      this.[name.toLowerFirst()/]FakeService.save[name.toUpperFirst()/](this.[name.toLowerFirst()/]).subscribe(res => {
        if (res.status == 201){
          swal('Success...', '[name.toUpperFirst()/] save successfully.', 'success');
        }else{
          swal('Error...', '[name.toUpperFirst()/] save unsuccessfully.', 'error');
        }

      } );
    }

	/*
    save([name.toLowerFirst()/], modal){
      this.[name.toLowerFirst()/]Service.save[name.toUpperFirst()/](this.[name.toLowerFirst()/]).subscribe(res => {
        if (res.status == 201){
          swal('Success...', '[name.toUpperFirst()/] save successfully.', 'success');
        }else{
          swal('Error...', '[name.toUpperFirst()/] save unsuccessfully.', 'error');
        }

      } );
    }
	*/

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Grid'))]
		    setClickedRow[aClass.name.toUpperFirst()/](id, event){
		      this.[aClass.name.toLowerFirst()/]FakeService.set[aClass.name.toUpperFirst()/](event);
		    }
		[/if]
	[/for]

	/*
	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='Grid'))]
		    setClickedRow[aClass.name.toUpperFirst()/](id, event){
		      this.[aClass.name.toLowerFirst()/]Service.set[aClass.name.toUpperFirst()/](event);
		    }
		[/if]
	[/for]
	*/

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
		    setClickedRow[p.name.toUpperFirst()/](id, event){
			console.log('Id: ', id);
			console.log('Event: ', event);
		      this.[p.name.toLowerFirst()/]FakeService.set[p.name.toUpperFirst()/](event);
		    }
		[/if]
	[/for]

	/*
	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
		    setClickedRow[p.name.toUpperFirst()/](id, event){
			console.log('Id: ', id);
			console.log('Event: ', event);
		      this.[p.name.toLowerFirst()/]Service.set[p.name.toUpperFirst()/](event);
		    }
		[/if]
	[/for]
	*/

	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumRadio') 
          or p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumCheck')
          or p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumSelect'))]
    load[p.type.name.toUpperFirst()/]s() {
      this.[p.type.name.toLower()/]FakeService.getAll[p.type.name.toUpperFirst()/]().subscribe(data => {
        if (data) {
          this.[p.type.name.toLower()/]List = data;
        }
      }, error => {
        swal('Error...', 'An error occurred while calling the [p.type.name.toLower()/]s.', 'error');
      });
    }
		[/if]
	[/for]

	/*
	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumRadio') 
          or p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumCheck')
          or p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='EnumSelect'))]
    load[p.type.name.toUpperFirst()/]s() {
      this.[p.type.name.toLower()/]Service.getAll[p.type.name.toUpperFirst()/]().subscribe(data => {
        if (data) {
          this.[p.type.name.toLower()/]List = data;
        }
      }, error => {
        swal('Error...', 'An error occurred while calling the [p.type.name.toLower()/]s.', 'error');
      });
    }
		[/if]
	[/for]
	*/
	
	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
		    load[p.name.toUpperFirst()/]s() {
		      this.[p.name.toLower()/]FakeService.getAll[p.name.toUpperFirst()/]().subscribe(data => {
		        if (data) {
		          this.[p.name.toLower()/]List = data;
		        }
		      }, error => {
		        swal('Error...', 'An error occurred while calling the [p.name.toLower()/]s.', 'error');
		      });
		    }
		[/if]
	[/for]

	/*
	[for (p : Property | aClass.attribute)]
		[if (p.type.getAppliedStereotypes() -> exists(s: Stereotype | s.name='ModalSearch'))]
		    load[p.name.toUpperFirst()/]s() {
		      this.[p.name.toLower()/]Service.getAll[p.name.toUpperFirst()/]().subscribe(data => {
		        if (data) {
		          this.[p.name.toLower()/]List = data;
		        }
		      }, error => {
		        swal('Error...', 'An error occurred while calling the [p.name.toLower()/]s.', 'error');
		      });
		    }
		[/if]
	[/for]
	*/

  add(){
    this.router.navigate(['['/]'/[name.toLower()/]'[']'/]);
  }

}

[/file]


			[/if]
		[/for]
	[/if]
[/for]


[/template]
